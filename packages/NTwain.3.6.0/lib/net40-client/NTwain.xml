<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NTwain</name>
    </assembly>
    <members>
        <member name="T:NTwain.CapWrapper`1">
            <summary>
            Wrapped class for reading/writing a TWAIN capability associated with a <see cref="T:NTwain.DataSource"/>.
            </summary>
            <typeparam name="TValue">The TWAIN type of the value.</typeparam>
        </member>
        <member name="M:NTwain.CapWrapper`1.#ctor(NTwain.IDataSource,NTwain.Data.CapabilityId,System.Func{System.Object,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.CapWrapper`1" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="capability">The capability.</param>
            <param name="getConversionRoutine">The value conversion routine in Get methods.</param>
            <param name="readOnly">if set to <c>true</c> then make this cap read-only.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            getConversionRoutine
            </exception>
            <exception cref="T:System.ArgumentNullException">source
            or
            getConversionRoutine</exception>
        </member>
        <member name="M:NTwain.CapWrapper`1.#ctor(NTwain.IDataSource,NTwain.Data.CapabilityId,System.Func{System.Object,`0},System.Func{`0,NTwain.Data.TWOneValue})">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.CapWrapper`1" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="capability">The capability.</param>
            <param name="getConversionRoutine">The value conversion routine in Get methods.</param>
            <param name="setValueProvider">Callback to provide the capability object for set method.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            getConversionRoutine
            or
            setValueProvider
            </exception>
        </member>
        <member name="M:NTwain.CapWrapper`1.#ctor(NTwain.IDataSource,NTwain.Data.CapabilityId,System.Func{System.Object,`0},System.Func{`0,NTwain.Data.ReturnCode})">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.CapWrapper`1" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="capability">The capability.</param>
            <param name="getConversionRoutine">The value conversion routine in Get methods.</param>
            <param name="setValueRoutine">Callback to perform set value.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            getConversionRoutine
            or
            setValueRoutine
            </exception>
        </member>
        <member name="P:NTwain.CapWrapper`1.Capability">
            <summary>
            Gets the capability.
            </summary>
            <value>
            The capability.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.SupportedActions">
            <summary>
            Gets the supported actions.
            </summary>
            <value>
            The supported actions.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.IsSupported">
            <summary>
            Gets a value indicating whether this capability is supported.
            </summary>
            <value>
            <c>true</c> if this capability is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGet">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetValues"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGetDefault">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetDefault"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get default value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGetCurrent">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetCurrent"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get current value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGetLabel">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetLabel"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get label; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGetHelp">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetHelp"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get help; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanGetLabelEnum">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.GetLabelEnum"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get label enum; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanReset">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.Reset"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can reset; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanSet">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.SetValue(`0)"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can set; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.CapWrapper`1.CanSetConstraint">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.CapWrapper`1.SetConstraint(NTwain.Data.TWOneValue)"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can set constraint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetDefault">
            <summary>
            Gets the default value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetCurrent">
            <summary>
            Gets the current value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetValuesRaw">
            <summary>
            Gets all the possible values of this capability without expanding.
            This may be required to work with large range values that cannot be safely enumerated
            with <see cref="M:NTwain.CapWrapper`1.GetValues"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.ConvertValues(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts the object values into typed values using the conversion routine
            for this capability.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetValues">
            <summary>
            Gets all the possible values of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetLabel">
            <summary>
            [Experimental] Gets the label value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetHelp">
            <summary>
            [Experimental] Gets the help value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.GetLabelEnum">
            <summary>
            [Experimental] Gets the display names for possible values of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.Reset">
            <summary>
            Resets the current value to power-on default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetValue(`0)">
            <summary>
            Simplified version that sets the current value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Simple Set() is not defined for this capability.</exception>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetValue(NTwain.Data.TWArray)">
            <summary>
            A version of Set that uses an array.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetValue(NTwain.Data.TWEnumeration)">
            <summary>
            A version of Set that uses an enumeration.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetConstraint(NTwain.Data.TWOneValue)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetConstraint(NTwain.Data.TWEnumeration)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.CapWrapper`1.SetConstraint(NTwain.Data.TWRange)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.CapabilityReader">
            <summary>
            The one-stop class for reading raw TWAIN cap values from the cap container.
            This contains all the properties for the 4 container types.
            </summary>
        </member>
        <member name="M:NTwain.CapabilityReader.ReadValue(NTwain.Data.TWCapability)">
            <summary>
            Reads the value from a <see cref="T:NTwain.Data.TWCapability" /> that was returned
            from a TWAIN source.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">capability</exception>
            <exception cref="T:System.ArgumentException">Capability contains no data.;capability
            or
            capability</exception>
        </member>
        <member name="M:NTwain.CapabilityReader.ReadValue(NTwain.Data.TWCapability,NTwain.IMemoryManager)">
            <summary>
            Reads the value from a <see cref="T:NTwain.Data.TWCapability" /> that was returned
            from a TWAIN source.
            </summary>
            <param name="capability">The capability.</param>
            <param name="memoryManager">The memory manager.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            capability
            or
            memoryManager
            </exception>
            <exception cref="T:System.ArgumentException">capability</exception>
        </member>
        <member name="M:NTwain.CapabilityReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.CapabilityReader"/> class.
            </summary>
        </member>
        <member name="P:NTwain.CapabilityReader.ContainerType">
            <summary>
            Gets the underlying container type. 
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.ItemType">
            <summary>
            Gets the type of the TWAIN value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.OneValue">
            <summary>
            Gets the one value if container is <see cref="F:NTwain.Data.ContainerType.OneValue"/>.
            </summary>
            <value>
            The one value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.CollectionValues">
            <summary>
            Gets the collection values if container is <see cref="F:NTwain.Data.ContainerType.Enum"/> or <see cref="F:NTwain.Data.ContainerType.Array"/> .
            </summary>
            <value>
            The collection values.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.EnumCurrentIndex">
            <summary>
            Gets the current value index if container is <see cref="F:NTwain.Data.ContainerType.Enum"/>.
            </summary>
        </member>
        <member name="P:NTwain.CapabilityReader.EnumDefaultIndex">
            <summary>
            Gets the default value index if container is <see cref="F:NTwain.Data.ContainerType.Enum" />.
            </summary>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeCurrentValue">
            <summary>
            Gets the current value if container is <see cref="F:NTwain.Data.ContainerType.Range" />.
            </summary>
            <value>
            The range current value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeDefaultValue">
            <summary>
            Gets the default value if container is <see cref="F:NTwain.Data.ContainerType.Range" />.
            </summary>
            <value>
            The range default value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeMinValue">
            <summary>
            The least positive/most negative value of the range.
            </summary>
            <value>
            The range minimum value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeMaxValue">
            <summary>
            The most positive/least negative value of the range.
            </summary>
            <value>
            The range maximum value.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeStepSize">
            <summary>
            The delta between two adjacent values of the range.
            e.g. Item2 - Item1 = StepSize;
            </summary>
            <value>
            The size of the range step.
            </value>
        </member>
        <member name="P:NTwain.CapabilityReader.RangeCount">
            <summary>
            Gets the number of range values if range is expanded.
            You should check for this before expanding range type containers to prevent
            possible <see cref="T:System.OutOfMemoryException"/>.
            </summary>
            <value>
            The range count.
            </value>
        </member>
        <member name="M:NTwain.CapabilityReader.EnumerateCapValues">
            <summary>
            Don't care what container it is, just enumerate the capability values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.Data.TypeExtensions">
            <summary>
            Contains extensions for reading/writing TWAIN types from/to pointer.
            </summary>
        </member>
        <member name="M:NTwain.Data.TypeExtensions.GetItemTypeSize(NTwain.Data.ItemType)">
            <summary>
            Gets the byte size of the item type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TypeExtensions.ReadValue(System.IntPtr,System.Int32@,NTwain.Data.ItemType)">
            <summary>
            Reads a TWAIN value.
            </summary>
            <param name="baseAddress">The base address.</param>
            <param name="offset">The offset.</param>
            <param name="type">The TWAIN type.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TypeExtensions.WriteValue(System.IntPtr,System.Int32@,NTwain.Data.ItemType,System.Object)">
            <summary>
            Writes a TWAIN value.
            </summary>
            <param name="baseAddr">The base addr.</param>
            <param name="offset">The offset.</param>
            <param name="type">The TWAIN type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NTwain.Data.TypeExtensions.WriteString(System.IntPtr,System.Int32,System.String,System.Int32)">
            <summary>
            Writes string value. THIS MAY BE WRONG.
            </summary>
            <param name="baseAddr"></param>
            <param name="offset"></param>
            <param name="item"></param>
            <param name="maxLength"></param>
        </member>
        <member name="T:NTwain.Data.TWFix32">
            <summary>
            Stores a fixed point number. This can be implicitly converted 
            to a float in dotnet.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFix32.Whole">
            <summary>
            The Whole part of the floating point number. This number is signed.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFix32.Fraction">
            <summary>
            The Fractional part of the floating point number. This number is unsigned.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWFix32.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.ToOneValue">
            <summary>
            Converts this to <see cref="T:NTwain.Data.TWOneValue"/> for capability set methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.Equals(NTwain.Data.TWFix32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Implicit(NTwain.Data.TWFix32)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:NTwain.Data.TWFix32"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Implicit(System.Single)~NTwain.Data.TWFix32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:NTwain.Data.TWFix32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Implicit(NTwain.Data.TWFix32)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:NTwain.Data.TWFix32"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Implicit(System.Double)~NTwain.Data.TWFix32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NTwain.Data.TWFix32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Equality(NTwain.Data.TWFix32,NTwain.Data.TWFix32)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NTwain.Data.TWFix32.op_Inequality(NTwain.Data.TWFix32,NTwain.Data.TWFix32)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:NTwain.Data.TWFrame">
            <summary>
            Embedded in the <see cref="T:NTwain.Data.TWImageLayout"/> structure. 
            Defines a frame rectangle in ICapUnits coordinates.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFrame.Left">
            <summary>
            Value of the left-most edge of the rectangle.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFrame.Top">
            <summary>
            Value of the top-most edge of the rectangle.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFrame.Right">
            <summary>
            Value of the right-most edge of the rectangle.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFrame.Bottom">
            <summary>
            Value of the bottom-most edge of the rectangle.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWFrame.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFrame.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFrame.Equals(NTwain.Data.TWFrame)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWFrame.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWFrame.op_Equality(NTwain.Data.TWFrame,NTwain.Data.TWFrame)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NTwain.Data.TWFrame.op_Inequality(NTwain.Data.TWFrame,NTwain.Data.TWFrame)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:NTwain.Data.TWDecodeFunction">
            <summary>
            Embedded in the <see cref="T:NTwain.Data.TWTransformStage"/> structure that is embedded in the <see cref="T:NTwain.Data.TWCieColor"/>
            structure. Defines the parameters used for channel-specific transformation. The transform can be
            described either as an extended form of the gamma function or as a table look-up with linear
            interpolation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.StartIn">
            <summary>
            Starting input value of the extended gamma function. Defines the
            minimum input value of channel data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.BreakIn">
            <summary>
            Ending input value of the extended gamma function. Defines the maximum
            input value of channel data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.EndIn">
            <summary>
            The input value at which the transform switches from linear
            transformation/interpolation to gamma transformation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.StartOut">
            <summary>
            Starting output value of the extended gamma function. Defines the
            minimum output value of channel data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.BreakOut">
            <summary>
            Ending output value of the extended gamma function. Defines the
            maximum output value of channel data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.EndOut">
            <summary>
            The output value at which the transform switches from linear
            transformation/interpolation to gamma transformation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.Gamma">
            <summary>
            Constant value. The exponential used in the gamma function.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDecodeFunction.SampleCount">
            <summary>
            The number of samples in the look-up table. Includes the values of StartIn
            and EndIn. Zero-based index (actually, number of samples - 1). If zero, use
            extended gamma, otherwise use table look-up.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWDecodeFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWDecodeFunction.Equals(NTwain.Data.TWDecodeFunction)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWDecodeFunction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWDecodeFunction.op_Equality(NTwain.Data.TWDecodeFunction,NTwain.Data.TWDecodeFunction)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NTwain.Data.TWDecodeFunction.op_Inequality(NTwain.Data.TWDecodeFunction,NTwain.Data.TWDecodeFunction)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:NTwain.Data.TWTransformStage">
            <summary>
            Specifies the parametrics used for either the ABC or LMN transform stages.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWTransformStage.Decode">
            <summary>
            Channel-specific transform parameters.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWTransformStage.Mix">
            <summary>
            Flattened 3x3 matrix that specifies how channels are mixed in.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWTransformStage.GetMixMatrix">
            <summary>
            Gets the <see cref="P:NTwain.Data.TWTransformStage.Mix"/> value as matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.Data.TWArray">
            <summary>
            Stores a group of associated individual values for a capability.
            The values need have no relationship to one another aside from 
            being used to describe the same "value" of the capability
            </summary>
        </member>
        <member name="P:NTwain.Data.TWArray.ItemType">
            <summary>
            The type of items in the array. All items in the array have the same size.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWArray.ItemList">
            <summary>
            Array of ItemType values starts here.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWAudioInfo">
            <summary>
            Used to get audio info.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWAudioInfo.Name">
            <summary>
            Name of audio data.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWCallback">
            <summary>
            Used in Callback mechanism for sending messages from the Source to the Application.
            Applications version 2.2 or higher must use <see cref="T:NTwain.Data.TWCallback2"/>.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCallback.#ctor(NTwain.Data.CallbackDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCallback"/> class.
            </summary>
            <param name="callback">The callback function’s entry point.</param>
        </member>
        <member name="T:NTwain.Data.TWCallback2">
            <summary>
            Used in the Callback mechanism for sending messages from the Source to the Application.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCallback2.#ctor(NTwain.Data.CallbackDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCallback2"/> class.
            </summary>
            <param name="callback">The callback function’s entry point.</param>
        </member>
        <member name="T:NTwain.Data.TWCapability">
            <summary>
            Used by an application either to get information about, or control the setting of a capability.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability" /> class.
            </summary>
            <param name="capability">The capability.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,NTwain.Data.TWOneValue)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability" /> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,System.String,NTwain.Data.ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability"/> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,NTwain.Data.TWFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability"/> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,NTwain.Data.TWEnumeration)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability" /> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,NTwain.Data.TWRange)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability" /> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NTwain.Data.TWCapability.#ctor(NTwain.Data.CapabilityId,NTwain.Data.TWArray)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWCapability" /> class.
            </summary>
            <param name="capability">The capability.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:NTwain.Data.TWCapability.Capability">
            <summary>
            Id of capability to set or get.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCapability.ContainerType">
            <summary>
            The type of the container structure referenced by the pointer internally. The container
            will be one of four types: <see cref="T:NTwain.Data.TWArray"/>, <see cref="T:NTwain.Data.TWEnumeration"/>,
            <see cref="T:NTwain.Data.TWOneValue"/>, or <see cref="T:NTwain.Data.TWRange"/>.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCapability.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCapability.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NTwain.Data.TWCapability"/> class.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWCiePoint">
            <summary>
            Embedded in the <see cref="T:NTwain.Data.TWCieColor"/> structure;
            defines a CIE XYZ space tri-stimulus value.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCiePoint.X">
            <summary>
            First tri-stimulus value of the CIE space representation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCiePoint.Y">
            <summary>
            Second tri-stimulus value of the CIE space representation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCiePoint.Z">
            <summary>
            Third tri-stimulus value of the CIE space representation.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWCiePoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWCiePoint.Equals(NTwain.Data.TWCiePoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWCiePoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWCiePoint.op_Equality(NTwain.Data.TWCiePoint,NTwain.Data.TWCiePoint)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NTwain.Data.TWCiePoint.op_Inequality(NTwain.Data.TWCiePoint,NTwain.Data.TWCiePoint)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:NTwain.Data.TWCieColor">
            <summary>
            Defines the mapping from an RGB color space device into CIE 1931 (XYZ) color space.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.ColorSpace">
            <summary>
            Defines the original color space that was transformed into CIE XYZ. 
            This value is not set-able by the application. 
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.LowEndian">
            <summary>
            Used to indicate which data byte is taken first. If zero, then high byte is
            first. If non-zero, then low byte is first.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.DeviceDependent">
            <summary>
            If non-zero then color data is device-dependent and only ColorSpace is
            valid in this structure.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.VersionNumber">
            <summary>
            Version of the color space descriptor specification used to define the
            transform data. The current version is zero.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.StageABC">
            <summary>
            Describes parametrics for the first stage transformation of the Postscript
            Level 2 CIE color space transform process.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.StageLMN">
            <summary>
            Describes parametrics for the first stage transformation of the Postscript
            Level 2 CIE color space transform process.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.WhitePoint">
            <summary>
            Values that specify the CIE 1931 (XYZ space) tri-stimulus value of the
            diffused white point.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.BlackPoint">
            <summary>
            Values that specify the CIE 1931 (XYZ space) tri-stimulus value of the
            diffused black point.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.WhitePaper">
            <summary>
            Values that specify the CIE 1931 (XYZ space) tri-stimulus value of inkless
            "paper" from which the image was acquired.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.BlackInk">
            <summary>
            Values that specify the CIE 1931 (XYZ space) tri-stimulus value of solid
            black ink on the "paper" from which the image was acquired.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCieColor.Samples">
            <summary>
            Optional table look-up values used by the decode function. Samples
            are ordered sequentially and end-to-end as A, B, C, L, M, and N.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWCustomDSData">
            <summary>
            Allows for a data source and application to pass custom data to each other.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCustomDSData.InfoLength">
            <summary>
            Length, in bytes, of data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWCustomDSData.hData">
            <summary>
            Handle to memory containing InfoLength bytes of data.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWDeviceEvent">
            <summary>
            Provides information about the Event that was raised by the Source. The Source should only fill
            in those fields applicable to the Event. The Application must only read those fields applicable to
            the Event.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.Event">
            <summary>
            Defines event that has taken place.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.DeviceName">
            <summary>
            The name of the device that generated the event.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.BatteryMinutes">
            <summary>
            Battery minutes remaining. Valid for BatteryCheck event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.BatteryPercentage">
            <summary>
            Battery percentage remaining. Valid for BatteryCheck event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.PowerSupply">
            <summary>
            Current power supply in use. Valid for PowerSupply event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.XResolution">
            <summary>
            Current X Resolution. Valid for Resolution event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.YResolution">
            <summary>
            Current Y Resolution. Valid for Resolution event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.FlashUsed2">
            <summary>
            Current flash setting. Valid for BatteryCheck event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.AutomaticCapture">
            <summary>
            Number of images camera will capture. Valid for AutomaticCapture event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.TimeBeforeFirstCapture">
            <summary>
            Number of seconds before first capture. Valid for AutomaticCapture event only.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWDeviceEvent.TimeBetweenCaptures">
            <summary>
            Hundredths of a second between captures. Valid for AutomaticCapture event only.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWElement8">
            <summary>
            Embedded in the <see cref="T:NTwain.Data.TWGrayResponse"/>, <see cref="T:NTwain.Data.TWPalette8"/>, and <see cref="T:NTwain.Data.TWRgbResponse"/> structures.
            This structure holds the tri-stimulus color palette information for <see cref="T:NTwain.Data.TWPalette8"/> structures.
            The order of the channels shall match their alphabetic representation. That is, for RGB data, R
            shall be channel 1. For CMY data, C shall be channel 1. This allows the application and Source
            to maintain consistency. Grayscale data will have the same values entered in all three channels.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWElement8.Index">
            <summary>
            Value used to index into the color table.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWElement8.Channel1">
            <summary>
            First tri-stimulus value (e.g. Red).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWElement8.Channel2">
            <summary>
            Second tri-stimulus value (e.g Green).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWElement8.Channel3">
            <summary>
            Third  tri-stimulus value (e.g Blue).
            </summary>
        </member>
        <member name="M:NTwain.Data.TWElement8.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWElement8.Equals(NTwain.Data.TWElement8)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWElement8.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWElement8.op_Equality(NTwain.Data.TWElement8,NTwain.Data.TWElement8)">
            <summary>
            Check for value equality.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWElement8.op_Inequality(NTwain.Data.TWElement8,NTwain.Data.TWElement8)">
            <summary>
            Check for value inequality.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Data.TWEnumeration">
            <summary>
            An enumeration stores a list of individual values, with one of the items designated as the current
            value. There is no required order to the values in the list.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEnumeration.ItemType">
            <summary>
            The type of items in the enumerated list. All items in the array have the same size.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEnumeration.CurrentIndex">
            <summary>
            The item number, or index (zero-based) into <see cref="P:NTwain.Data.TWEnumeration.ItemList"/>, of the "current"
            value for the capability.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEnumeration.DefaultIndex">
            <summary>
            The item number, or index (zero-based) into <see cref="P:NTwain.Data.TWEnumeration.ItemList"/>, of the "power-on"
            value for the capability.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEnumeration.ItemList">
            <summary>
            The enumerated list: one value resides within each array element.
            </summary>
        </member>
        <member name="F:NTwain.Data.TWEnumeration.ItemOffset">
            <summary>
            Gets the byte offset of the item list from a Ptr to the first item.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWEvent">
            <summary>
            Used on Windows and Macintosh pre OS X to pass application events/messages from the
            application to the Source.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEvent.pEvent">
            <summary>
            A pointer to the event/message to be examined by the Source.
            Under Microsoft Windows, pEvent is a pMSG (pointer to a Microsoft
            Windows MSG struct). That is, the message the application received from
            GetMessage(). On the Macintosh, pEvent is a pointer to an EventRecord.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWEvent.TWMessage">
            <summary>
            Any message the Source needs to send to the application in
            response to processing the event/message. The messages currently defined for
            this purpose are <see cref="F:NTwain.Data.Message.Null"/>, <see cref="F:NTwain.Data.Message.XferReady"/> 
            and <see cref="F:NTwain.Data.Message.CloseDSReq"/>.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWInfo">
            <summary>
            This structure is used to pass specific information between the data source and the application
            through <see cref="T:NTwain.Data.TWExtImageInfo"/>.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWInfo.InfoID">
            <summary>
            Tag identifying an information.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWInfo.ItemType">
            <summary>
            Item data type.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWInfo.NumItems">
            <summary>
            Number of items.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWInfo.ReturnCode">
            <summary>
            This is the return code of availability of data for extended image attribute requested.
            </summary>
            <value>
            The return code.
            </value>
        </member>
        <member name="P:NTwain.Data.TWInfo.Item">
            <summary>
            Contains either data or a handle to data. The field
            contains data if the total amount of data is less than or equal to four bytes. The
            field contains a handle if the total amount of data is more than four bytes.
            The amount of data is determined by multiplying NumItems times
            the byte size of the data type specified by ItemType.
            If the Item field contains a handle to data, then the Application is
            responsible for freeing that memory.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWInfo.ReadValues">
            <summary>
            Try to reads the values from the <see cref="P:NTwain.Data.TWInfo.Item"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWExtImageInfo">
            <summary>
            This structure is used to pass extended image information from the data source to application at
            the end of State 7. The application creates this structure at the end of State 7, when it receives
            XFERDONE. Application fills NumInfos for Number information it needs, and array of
            extended information attributes in Info[ ] array. Application, then, sends it down to the source
            using the above operation triplet. The data source then examines each Info, and fills the rest of
            data with information allocating memory when necessary.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWExtImageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWExtImageInfo"/> class.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWExtImageInfo.NumInfos">
            <summary>
            Number of information that application is requesting. This is filled by the
            application. If positive, then the application is requesting specific extended
            image information. The application should allocate memory and fill in the
            attribute tag for image information.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWExtImageInfo.Info">
            <summary>
            Array of information.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWFileSystem">
            <summary>
            Provides information about the currently selected device.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.InputName">
            <summary>
            The name of the input or source file.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.OutputName">
            <summary>
            The result of an operation or the name of a destination file.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.Context">
            <summary>
            A pointer to Source specific data used to remember state
            information, such as the current directory.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.Recursive">
            <summary>
            When set to TRUE recursively apply the operation. (ex: deletes
            all subdirectories in the directory being deleted; or copies all
            sub-directories in the directory being copied.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.FileType">
            <summary>
            Gets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.Size">
            <summary>
            If <see cref="F:NTwain.Data.FileType.Directory"/>, total size of media in bytes.
            If <see cref="F:NTwain.Data.FileType.Image"/>, size of image in bytes.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.CreateTimeDate">
            <summary>
            The create date of the file, in the form "YYYY/MM/DD
            HH:mm:SS:sss" where YYYY is the year, MM is the numerical
            month, DD is the numerical day, HH is the hour, mm is the
            minute, SS is the second, and sss is the millisecond.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.ModifiedTimeDate">
            <summary>
            Last date the file was modified. Same format as <see cref="P:NTwain.Data.TWFileSystem.CreateTimeDate"/>.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.FreeSpace">
            <summary>
            The bytes of free space left on the current device.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.NewImageSize">
            <summary>
            An estimate of the amount of space a new image would take
            up, based on image layout, resolution and compression.
            Dividing this value into the FreeSpace will yield the
            approximate number of images that the Device has room for.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.NumberOfFiles">
            <summary>
            If applicable, return the number of <see cref="F:NTwain.Data.FileType.Image"/> files on the file system including those in all sub-directories.
            </summary>
            <value>
            The number of files.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.NumberOfSnippets">
            <summary>
            The number of audio snippets associated with a file of type <see cref="F:NTwain.Data.FileType.Image"/>.
            </summary>
            <value>
            The number of snippets.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFileSystem.DeviceGroupMask">
            <summary>
            Used to group cameras (ex: front/rear bitonal, front/rear grayscale...).
            </summary>
        </member>
        <member name="T:NTwain.Data.TWGrayResponse">
            <summary>
            This structure is used by the application to specify a set of mapping values to be applied to
            grayscale data.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWGrayResponse.Response">
            <summary>
            Transfer curve descriptors. All three channels (Channel1, Channel2
            and Channel3) must contain the same value for every entry.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWVersion">
            <summary>
            A general way to describe the version of software that is running.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWVersion.Major">
            <summary>
            This refers to your application or Source’s major revision number. e.g. The
            "2" in "version 2.1".
            </summary>
        </member>
        <member name="P:NTwain.Data.TWVersion.Minor">
            <summary>
            The incremental revision number of your application or Source. e.g. The "1"
            in "version 2.1".
            </summary>
        </member>
        <member name="P:NTwain.Data.TWVersion.Language">
            <summary>
            The primary language for your Source or application.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWVersion.Country">
            <summary>
            The primary country where your Source or application is intended to be
            distributed. e.g. Germany.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWVersion.Info">
            <summary>
            General information string - fill in as needed. e.g. "1.0b3 Beta release".
            </summary>
        </member>
        <member name="M:NTwain.Data.TWVersion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NTwain.Data.TWVersion.Equals(NTwain.Data.TWVersion)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NTwain.Data.TWVersion.op_Equality(NTwain.Data.TWVersion,NTwain.Data.TWVersion)">
            <summary>
            Check for value equality.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWVersion.op_Inequality(NTwain.Data.TWVersion,NTwain.Data.TWVersion)">
            <summary>
            Check for value inequality.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Data.TWIdentity">
            <summary>
            Provides identification information about a TWAIN entity. Used to maintain consistent
            communication between entities.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.Id">
            <summary>
            A unique, internal identifier for the TWAIN entity. This field is only
            filled by the Source Manager. Neither an application nor a Source
            should fill this field. The Source uses the contents of this field to
            "identify" which application is invoking the operation sent to the
            Source.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.DataGroup">
            <summary>
            Gets the supported data group. The application will normally set this field to specify which Data
            Group(s) it wants the Source Manager to sort Sources by when
            presenting the Select Source dialog, or returning a list of available
            Sources.
            </summary>
            <value>The data group.</value>
        </member>
        <member name="P:NTwain.Data.TWIdentity.ProtocolMajor">
            <summary>
            Major number of latest TWAIN version that this element supports.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.ProtocolMinor">
            <summary>
            Minor number of latest TWAIN version that this element supports.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.Version">
            <summary>
            A <see cref="T:NTwain.Data.TWVersion"/> structure identifying the TWAIN entity.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.DataFunctionalities">
            <summary>
            Gets the data functionalities for TWAIN 2 detection.
            </summary>
            <value>The data functionalities.</value>
        </member>
        <member name="P:NTwain.Data.TWIdentity.Manufacturer">
            <summary>
            String identifying the manufacturer of the application or Source. e.g. "Aldus".
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.ProductFamily">
            <summary>
            Tells an application that performs device-specific operations which
            product family the Source supports. This is useful when a new Source
            has been released and the application doesn't know about the
            particular Source but still wants to perform Custom operations with it.
            e.g. "ScanMan".
            </summary>
        </member>
        <member name="P:NTwain.Data.TWIdentity.ProductName">
            <summary>
            A string uniquely identifying the Source. This is the string that will be
            displayed to the user at Source select-time. This string must uniquely
            identify your Source for the user, and should identify the application
            unambiguously for Sources that care. e.g. "ScanJet IIc".
            </summary>
        </member>
        <member name="M:NTwain.Data.TWIdentity.CreateFromAssembly(NTwain.Data.DataGroups,System.Reflection.Assembly)">
            <summary>
            Creates a <see cref="T:NTwain.Data.TWIdentity" /> from assembly values.
            </summary>
            <param name="supportedGroups">The supported groups.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NTwain.Data.TWIdentity.Create(NTwain.Data.DataGroups,System.Version,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NTwain.Data.TWIdentity" /> from specified values.
            </summary>
            <param name="supportedGroups">The supported groups.</param>
            <param name="version">The version.</param>
            <param name="manufacturer">The manufacturer.</param>
            <param name="productFamily">The product family.</param>
            <param name="productName">Name of the product.</param>
            <param name="productDescription">The product description.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:NTwain.Data.TWImageInfo">
            <summary>
            Describes the "real" image data, that is, the complete image being transferred between the
            Source and application. The Source may transfer the data in a different format--the information
            may be transferred in "strips" or "tiles" in either compressed or uncompressed form.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.XResolution">
            <summary>
            The number of pixels per ICapUnits in the horizontal direction. The
            current unit is assumed to be "inches" unless it has been otherwise
            negotiated between the application and Source.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.YResolution">
            <summary>
            The number of pixels per ICapUnits in the vertical direction.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.ImageWidth">
            <summary>
            How wide, in pixels, the entire image to be transferred is. If the Source
            doesn’t know, set this field to -1 (hand scanners may do this).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.ImageLength">
            <summary>
            How tall/long, in pixels, the image to be transferred is. If the Source
            doesn’t know, set this field to -1 (hand scanners may do this).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.SamplesPerPixel">
            <summary>
            The number of samples being returned. For R-G-B, this field would be
            set to 3. For C-M-Y-K, 4. For Grayscale or Black and White, 1.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.BitsPerSample">
            <summary>
            For each sample, the number of bits of information. 24-bit R-G-B will
            typically have 8 bits of information in each sample (8+8+8). Some 8-bit
            color is sampled at 3 bits Red, 3 bits Green, and 2 bits Blue. Such a
            scheme would put 3, 3, and 2 into the first 3 elements of this array. The
            supplied array allows up to 8 samples. Samples are not limited to 8
            bits. However, both the application and Source must simultaneously
            support sample sizes greater than 8 bits per color.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.BitsPerPixel">
            <summary>
            The number of bits in each image pixel (or bit depth). This value is
            invariant across the image. 24-bit R-G-B has BitsPerPixel = 24. 40-bit 
            CMYK has BitsPerPixel=40. 8-bit Grayscale has BitsPerPixel = 8. Black
            and White has BitsPerPixel = 1.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.Planar">
            <summary>
            If SamplesPerPixel > 1, indicates whether the samples follow one
            another on a pixel-by-pixel basis (R-G-B-R-G-B-R-G-B...) as is common
            with a one-pass scanner or all the pixels for each sample are grouped
            together (complete group of R, complete group of G, complete group of
            B) as is common with a three-pass scanner. If the pixel-by-pixel
            method (also known as "chunky") is used, the Source should set Planar
            = FALSE. If the grouped method (also called "planar") is used, the
            Source should set Planar = TRUE.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.PixelType">
            <summary>
            This is the highest categorization for how the data being transferred
            should be interpreted by the application. This is how the application
            can tell if the data is Black and White, Grayscale, or Color. Currently,
            the only color type defined is "tri-stimulus", or color described by three
            characteristics. Most popular color description methods use tristimulus
            descriptors. For simplicity, the constant used to identify tristimulus
            color is called Rgb, for R-G-B color. There is no
            default for this value.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageInfo.Compression">
            <summary>
            The compression method used to process the data being transferred.
            Default is no compression.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWImageLayout">
            <summary>
            Involves information about the original size of the acquired image and its position on the
            original "page" relative to the "page’s" upper-left corner. Default measurements are in inches
            (units of measure can be changed by negotiating the ICapUnits capability). This information
            may be used by the application to relate the acquired (and perhaps processed image) to the
            original. Further, the application can, using this structure, set the size of the image it wants
            acquired.
            
            Another attribute of this structure is the included frame, page, and document indexing
            information. Most Sources and applications, at least at first, will likely set all these fields to one.
            For Sources that can acquire more than one frame from a page in a single acquisition, the
            FrameNumber field will be handy. Sources that can acquire more than one page from a
            document feeder will use PageNumber and DocumentNumber. These fields will be especially
            useful for forms-processing applications and other applications with similar document tracking
            requirements.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageLayout.Frame">
            <summary>
            Frame coords within larger document.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageLayout.DocumentNumber">
            <summary>
            The document number, assigned by the Source, that the acquired data
            originated on. Useful for grouping pages together.
            Initial value is 1. Increment when a new document is placed into the
            document feeder (usually tell this has happened when the feeder
            empties). Reset when no longer acquiring from the feeder.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageLayout.PageNumber">
            <summary>
            The page which the acquired data was captured from. Useful for
            grouping Frames together that are in some way related. 
            Initial value is 1. Increment for each page fed from
            a page feeder. Reset when a new document is placed into the feeder.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageLayout.FrameNumber">
            <summary>
            Usually a chronological index of the acquired frame. These frames
            are related to one another in some way; usually they were acquired
            from the same page. The Source assigns these values. Initial value is
            1. Reset when a new page is acquired from.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWMemory">
            <summary>
            Provides information for managing memory buffers. Memory for transfer buffers is allocated
            by the application--the Source is asked to fill these buffers. This structure keeps straight which
            entity is responsible for deallocation.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWMemory.Flags">
            <summary>
            Encodes which entity releases the buffer and how the buffer is referenced.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWMemory.Length">
            <summary>
            The size of the buffer in bytes. Should always be an even number and wordaligned.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWMemory.TheMem">
            <summary>
            Reference to the buffer. May be a Pointer or a Handle (see Flags field to make
            this determination).
            </summary>
        </member>
        <member name="T:NTwain.Data.TWImageMemXfer">
            <summary>
            Describes the form of the acquired data being passed from the Source to the application in memory transfer mode.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.Compression">
            <summary>
            The compression method used to process the data being transferred.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.BytesPerRow">
            <summary>
            The number of uncompressed bytes in each row of the piece of the image
            being described in this buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.Columns">
            <summary>
            The number of uncompressed columns (in pixels) in this buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.Rows">
            <summary>
            The number or uncompressed rows (in pixels) in this buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.XOffset">
            <summary>
            How far, in pixels, the left edge of the piece of the image being described
            by this structure is inset from the "left" side of the original image. If the
            Source is transferring in "strips", this value will equal zero. If the Source
            is transferring in "tiles", this value will often be non-zero.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.YOffset">
            <summary>
            Same idea as XOffset, but the measure is in pixels from the "top" of the
            original image to the upper edge of this piece.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.BytesWritten">
            <summary>
            The number of bytes written into the transfer buffer. This field must
            always be filled in correctly, whether compressed or uncompressed data
            is being transferred.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWImageMemXfer.Memory">
            <summary>
            A structure of type <see cref="T:NTwain.Data.TWMemory"/> describing who must dispose of the
            buffer, the actual size of the buffer, in bytes, and where the buffer is
            located in memory.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWJpegCompression">
            <summary>
            Describes the information necessary to transfer a JPEG-compressed image during a buffered
            transfer. Images compressed in this fashion will be compatible with the JPEG File Interchange
            Format, version 1.1.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.ColorSpace">
            <summary>
            Defines the color space in which the
            compressed components are stored.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.Subsampling">
            <summary>
            Encodes the horizontal and vertical subsampling in the form
            ABCDEFGH, where ABCD are the high-order four nibbles which
            represent the horizontal subsampling and EFGH are the low-order four
            nibbles which represent the vertical subsampling. Each nibble may
            have a value of 0, 1, 2, 3, or 4. However, max(A,B,C,D) * max(E,F,G,H)
            must be less than or equal to 10. Subsampling is irrelevant for single
            component images. Therefore, the corresponding nibbles should be set
            to 1. e.g. To indicate subsampling two Y for each U and V in a YUV
            space image, where the same subsampling occurs in both horizontal
            and vertical axes, this field would hold 0x21102110. For a grayscale
            image, this field would hold 0x10001000. A CMYK image could hold
            0x11111111.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.NumComponents">
            <summary>
            Number of color components in the image to be compressed.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.RestartFrequency">
            <summary>
            Number of MDUs (Minimum Data Units) between restart markers.
            Default is 0, indicating that no restart markers are used. An MDU is
            defined for interleaved data (i.e. R-G-B, Y-U-V, etc.) as a minimum
            complete set of 8x8 component blocks.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.QuantMap">
            <summary>
            Mapping of components to Quantization tables.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.QuantTable">
            <summary>
            Quantization tables.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.HuffmanMap">
            <summary>
            Mapping of components to Huffman tables. Null entries signify
            selection of the default tables.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.HuffmanDC">
            <summary>
            DC Huffman tables. Null entries signify selection of the default tables.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWJpegCompression.HuffmanAC">
            <summary>
            AC Huffman tables. Null entries signify selection of the default tables.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWOneValue">
            <summary>
            Container for one value.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWOneValue.ItemType">
            <summary>
            The type of the item.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWOneValue.Item">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWPalette8">
            <summary>
            This structure holds the color palette information for buffered memory transfers of type
            ICapPixelType = Palette.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPalette8.NumColors">
            <summary>
            Number of colors in the color table; maximum index into the color table
            should be one less than this (since color table indexes are zero-based).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPalette8.PaletteType">
            <summary>
            Specifies type of palette.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPalette8.Colors">
            <summary>
            Array of palette values.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWPassThru">
            <summary>
            Used to bypass the TWAIN protocol when communicating with a device. All memory must be
            allocated and freed by the Application.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.pCommand">
            <summary>
            Pointer to Command buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.CommandBytes">
            <summary>
            Number of bytes in Command buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.Direction">
            <summary>
            Defines the direction of data flow.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.pData">
            <summary>
            Pointer to Data buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.DataBytes">
            <summary>
            Number of bytes in Data buffer.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPassThru.DataBytesXfered">
            <summary>
            Number of bytes successfully transferred.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWPendingXfers">
            <summary>
            This structure tells the application how many more complete transfers the Source currently has
            available.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWPendingXfers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWPendingXfers"/> class.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPendingXfers.Count">
            <summary>
            The number of complete transfers a Source has available for the application it is
            connected to. If no more transfers are available, set to zero. If an unknown and
            non-zero number of transfers are available, set to -1.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWPendingXfers.EndOfJob">
            <summary>
            The application should check this field if the CapJobControl is set to other
            than None. If this is not 0, the application should expect more data
            from the driver according to CapJobControl settings.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWRange">
            <summary>
            Container for a range of values.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.ItemType">
            <summary>
            The type of items in the list.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.MinValue">
            <summary>
            The least positive/most negative value of the range.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.MaxValue">
            <summary>
            The most positive/least negative value of the range.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.StepSize">
            <summary>
            The delta between two adjacent values of the range.
            e.g. Item2 - Item1 = StepSize;
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.DefaultValue">
            <summary>
            The device’s "power-on" value for the capability. If the application is
            performing a MSG_SET operation and isn’t sure what the default
            value is, set this field to <see cref="F:NTwain.Data.TwainConst.DoNotCare32"/>.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRange.CurrentValue">
            <summary>
            The value to which the device (or its user interface) is currently set to
            for the capability.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWRgbResponse">
            <summary>
            This structure is used by the application to specify a set of mapping values to be applied to RGB
            color data. Use this structure for RGB data whose bit depth is up to, and including, 8-bits.
            The number of elements in the array is determined by <see cref="P:NTwain.Data.TWImageInfo.BitsPerPixel"/>—the number of
            elements is 2 raised to the power of <see cref="P:NTwain.Data.TWImageInfo.BitsPerPixel"/>.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWRgbResponse.Response">
            <summary>
            Transfer curve descriptors. To minimize color shift problems, writing the
            same values into each channel is desirable.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWSetupFileXfer">
            <summary>
            Describes the file format and file specification information for a transfer through a disk file.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupFileXfer.FileName">
            <summary>
            A complete file specifier to the target file. On Windows, be sure to include the
            complete pathname.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupFileXfer.Format">
            <summary>
            The format of the file the Source is to fill. 
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupFileXfer.VRefNum">
            <summary>
            The volume reference number for the file. This applies to Macintosh only. On
            Windows, fill the field with -1.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWSetupMemXfer">
            <summary>
            Provides the application information about the Source’s requirements and preferences
            regarding allocation of transfer buffer(s).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupMemXfer.MinBufferSize">
            <summary>
            The size of the smallest transfer buffer, in bytes, that a Source can be
            successful with. This will typically be the number of bytes in an
            uncompressed row in the block to be transferred. An application should
            never allocate a buffer smaller than this.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupMemXfer.MaxBufferSize">
            <summary>
            The size of the largest transfer buffer, in bytes, that a Source can fill. If a
            Source can fill an arbitrarily large buffer, it might set this field to negative 1 to
            indicate this (a hand-held scanner might do this, depending on how long its
            cord is). Other Sources, such as frame grabbers, cannot fill a buffer larger than
            a certain size. Allocation of a transfer buffer larger than this value is wasteful.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWSetupMemXfer.Preferred">
            <summary>
            The size of the optimum transfer buffer, in bytes. A smart application will
            allocate transfer buffers of this size, if possible. Buffers of this size will
            optimize the Source’s performance. Sources should be careful to put
            reasonable values in this field. Buffers that are 10’s of kbytes will be easier for
            applications to allocate than buffers that are 100’s or 1000’s of kbytes.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWStatus">
            <summary>
            Describes the status of a source.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWStatus.ConditionCode">
            <summary>
            Condition Code describing the status.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWStatus.Data">
            <summary>
            Valid for TWAIN 2.1 and later. This field contains additional
            scanner-specific data. If there is no data, then this value must be zero.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWStatusUtf8">
            <summary>
            Translates the contents of Status into a localized UTF8string, with the total number of bytes
            in the string.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWStatusUtf8.Status">
            <summary>
            <see cref="T:NTwain.Data.TWStatus"/> data received from a previous call.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWStatusUtf8.Size">
            <summary>
            Total number of bytes in the UTF8string, plus the terminating NULL byte. 
            This is not the same as the total number of characters in the string.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWStatusUtf8.UTF8StringPtr">
            <summary>
            TW_HANDLE to a UTF-8 encoded localized string (based on 
            TwIdentity.Language or CapLanguage). The Source allocates
            it, the Application frees it.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWStatusUtf8.TryGetString">
            <summary>
            Gets the actual string from the pointer. This may be incorrect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.TWStatusUtf8.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWStatusUtf8.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NTwain.Data.TWStatusUtf8"/> class.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWUserInterface">
            <summary>
            This structure is used to handle the user interface coordination between an application and a
            Source.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWUserInterface.ShowUI">
            <summary>
            Set to TRUE by the application if the Source should activate its built-in user
            interface. Otherwise, set to FALSE. Note that not all sources support ShowUI =
            FALSE.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWUserInterface.ModalUI">
            <summary>
            If ShowUI is TRUE, then an application setting this to TRUE requests the Source to
            run Modal.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWUserInterface.hParent">
            <summary>
            Microsoft Windows only: Application’s window handle. The Source designates
            the hWnd as its parent when creating the Source dialog.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWEntryPoint">
            <summary>
            Provides entry points required by TWAIN 2.0 Applications and Sources.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWEntryPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWEntryPoint"/> class.
            </summary>
        </member>
        <member name="T:NTwain.Data.TWFilterDescriptor">
            <summary>
            The range of colors specified by this structure is replaced with Replacement grayscale value in the
            binary image. The color is specified in HSV color space.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWFilterDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWFilterDescriptor"/> struct.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.Size">
            <summary>
            Size of this structure in bytes.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.HueStart">
            <summary>
            Hue starting number. Valid values 0 to 3600 (0° to 360°).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.HueEnd">
            <summary>
            Hue ending number. Valid values 0 to 3600 (0° to 360°).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.SaturationStart">
            <summary>
            Saturation starting number. Valid values 0 to 1000 (0% to 100%).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.SaturationEnd">
            <summary>
            Saturation ending number. Valid values 0 to 1000 (0% to 100%).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.ValueStart">
            <summary>
            Luminosity starting number. Valid values 0 to 1000 (0% to 100%).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.ValueEnd">
            <summary>
            Luminosity ending number. Valid values 0 to 1000 (0% to 100%).
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilterDescriptor.Replacement">
            <summary>
            Replacement grayscale value. Valid values 0 to (2^32)–1 (Maximum value
            depends on grayscale bit depth).
            </summary>
        </member>
        <member name="T:NTwain.Data.TWFilter">
            <summary>
            Specifies the filter to be applied during image acquisition. More than one descriptor can be
            specified. All descriptors are applied with an OR statement.
            </summary>
        </member>
        <member name="M:NTwain.Data.TWFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Data.TWFilter"/> class.
            </summary>
        </member>
        <member name="P:NTwain.Data.TWFilter.DescriptorCount">
            <summary>
            Number of descriptors in hDescriptors array.
            </summary>
            <value>
            The descriptor count.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFilter.MaxDescriptorCount">
            <summary>
            Maximum possible descriptors. Valid only for GET and GETDEFAULT operations.
            </summary>
            <value>
            The maximum descriptor count.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFilter.Condition">
            <summary>
            If the value is 0 filter will check if current pixel color is inside the area
            specified by the descriptor. If the value is 1 it will check if it is outside
            of this area.
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:NTwain.Data.TWFilter.hDescriptors">
            <summary>
            Handle to array of <see cref="T:NTwain.Data.TWFilterDescriptor"/>.
            </summary>
            <value>
            The descriptors.
            </value>
        </member>
        <member name="T:NTwain.Data.ContainerType">
            <summary>
            Indicates the type of container used in capability.
            Corresponds to TWON_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.Invalid">
            <summary>
            The default value for this enum.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.Array">
            <summary>
            The container is <see cref="T:NTwain.Data.TWArray"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.Enum">
            <summary>
            The container is <see cref="T:NTwain.Data.TWEnumeration"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.OneValue">
            <summary>
            The container is <see cref="T:NTwain.Data.TWOneValue"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.Range">
            <summary>
            The container is <see cref="T:NTwain.Data.TWRange"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ContainerType.DoNotCare">
            <summary>
            The don't care value.
            </summary>
        </member>
        <member name="T:NTwain.Data.MemoryFlags">
            <summary>
            Flags used in <see cref="T:NTwain.Data.TWMemory"/>.
            Corresponds to TWMF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.ItemType">
            <summary>
            The data types of item in TWAIN, used in the
            capability containers.
            Corresponds to TWTY_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Int8">
            <summary>
            Means Item is a an 8 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Int16">
            <summary>
            Means Item is a 16 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Int32">
            <summary>
            Means Item is a 32 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.UInt8">
            <summary>
            Means Item is an unsigned 8 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.UInt16">
            <summary>
            Means Item is an unsigned 16 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.UInt32">
            <summary>
            Means Item is an unsigned 32 bit value.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Bool">
            <summary>
            Means Item is an unsigned 16 bit value (supposedly, YMMV).
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Fix32">
            <summary>
            Means Item is a <see cref="F:NTwain.Data.ItemType.Fix32"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Frame">
            <summary>
            Means Item is a <see cref="F:NTwain.Data.ItemType.Frame"/>.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.String32">
            <summary>
            Means Item is a 32 char string (max).
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.String64">
            <summary>
            Means Item is a 64 char string (max).
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.String128">
            <summary>
            Means Item is a 128 char string (max).
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.String255">
            <summary>
            Means Item is a char string shorter than 255.
            </summary>
        </member>
        <member name="F:NTwain.Data.ItemType.Handle">
            <summary>
            Means Item is a handle (pointer).
            </summary>
        </member>
        <member name="T:NTwain.Data.AlarmType">
            <summary>
            CapAlarms values.
            Corresponds to TWAL_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.AutoSize">
            <summary>
            ICapAutoSize values.
            Corresponds to TWAS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.BarcodeRotation">
            <summary>
            The bar code’s orientation on the scanned image is described in
            reference to a Western-style interpretation of the image.
            Corresponds to TWBCOR_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.BarcodeRotation.Rot0">
            <summary>
            Normal reading orientation.
            </summary>
        </member>
        <member name="F:NTwain.Data.BarcodeRotation.Rot90">
            <summary>
            Rotated 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:NTwain.Data.BarcodeRotation.Rot180">
            <summary>
            Rotated 180 degrees clockwise.
            </summary>
        </member>
        <member name="F:NTwain.Data.BarcodeRotation.Rot270">
            <summary>
            Rotated 270 degrees clockwise.
            </summary>
        </member>
        <member name="F:NTwain.Data.BarcodeRotation.RotX">
            <summary>
            The orientation is not known.
            </summary>
        </member>
        <member name="T:NTwain.Data.BarcodeDirection">
            <summary>
            ICapBarcodeSearchMode values,
            ICapPatchCodeSearchMode values.
            Corresponds to TWBD_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.BitOrder">
            <summary>
            ICapBitOrder/ICapBitOrderCodes values.
            Corresponds to TWBO_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.BlankPage">
            <summary>
            ICapAutoDiscardBlankPages values.
            Corresponds to TWBP_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.BitDepthReduction">
            <summary>
            Values for ICapBitDepthReduction.
            Corresponds to TWBR_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.BarcodeType">
            <summary>
            ICapBarcodeSearchPriorities values,
            ICapSupportedBarcodeTypes values.
            Corresponds to TWBT_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.CompressionType">
            <summary>
            ICapCompression values. Allows the application and Source to identify which compression schemes they have in common
            for Buffered Memory and File transfers. Since only certain file formats support compression, this capability must be negotiated after
            setting the desired file format with ICAP_IMAGEFILEFORMAT.
            Corresponds to TWCP_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.None">
            <summary>
            All Sources must support this.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.PackBits">
            <summary>
            Can be used with TIFF or PICT
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Group31D">
            <summary>
            From the CCITT specification (now ITU), intended for document images (can be used with TIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Group31DEol">
            <summary>
            From the CCITT specification (now ITU), intended for document images (can be used with TIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Group32D">
            <summary>
            From the CCITT specification (now ITU), intended for document images (can be used with TIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Group4">
            <summary>
            From the CCITT specification (now ITU), intended for document images (can be used with TIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Jpeg">
            <summary>
            Intended for the compression of color photographs (can be used with TIFF, JFIF or SPIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Lzw">
            <summary>
            A compression licensed by UNISYS (can be used with TIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Jbig">
            <summary>
            Intended for bitonal and grayscale document images (can be used with TIFF or SPIFF).
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Png">
            <summary>
            This compression can only be used if ICAP_IMAGEFILEFORMAT is set to TWFF_PNG.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Rle4">
            <summary>
            Can only be used if ICAP_IMAGEFILEFORMAT is set to TWFF_BMP.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Rle8">
            <summary>
            Can only be used if ICAP_IMAGEFILEFORMAT is set to TWFF_BMP.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.BitFields">
            <summary>
            Can only be used if ICAP_IMAGEFILEFORMAT is set to TWFF_BMP.
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Zip">
            <summary>
            Per RFC 1951 (AKA 'Flate' and 'Deflate')
            </summary>
        </member>
        <member name="F:NTwain.Data.CompressionType.Jpeg2000">
            <summary>
            Per ISO/IEC 15444
            </summary>
        </member>
        <member name="T:NTwain.Data.CameraSide">
            <summary>
            CapCameraSide/TWEI_PAGESIDE values.
            Corresponds to TWCS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.ClearBuffer">
            <summary>
            CapClearBuffers values.
            Corresponds to TWCB_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DeviceEvent">
            <summary>
            Indicates the type of event from the source.
            Also CapDeviceEvent values. If used as
            a cap value it's ushort.
            Corresponds to TWDE_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Direction">
            <summary>
            <see cref="P:NTwain.Data.TWPassThru.Direction"/> values.
            Corresponds to TWDR_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DeskewStatus">
            <summary>
            TWEI_DESKEWSTATUS values.
            Corresponds to TWDSK_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Duplex">
            <summary>
            CapDuplex values.
            Corresponds to TWDX_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FeederAlignment">
            <summary>
            CapFeederAlignment values.
            Corresponds to TWFA_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FeederType">
            <summary>
            ICapFeederType values.
            Corresponds to TWFE_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FileFormat">
            <summary>
            ICapImageFileFormat values.
            Corresponds to TWFF_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Tiff">
            <summary>
            Used for document imaging. Native Linux format.
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Pict">
            <summary>
            Native Macintosh format
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Bmp">
            <summary>
            Native Microsoft format
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Xbm">
            <summary>
            Used for document imaging
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Jfif">
            <summary>
            Wrapper for JPEG images
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Fpx">
            <summary>
            FlashPix, used with digital cameras
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.TiffMulti">
            <summary>
            Multi-page TIFF files
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Png">
            <summary>
            An image format standard intended for use on the web, replaces GIF
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Spiff">
            <summary>
            A standard from JPEG, intended to replace JFIF, also supports JBIG
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Exif">
            <summary>
            File format for use with digital cameras.
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Pdf">
            <summary>
            A file format from Adobe
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Jp2">
            <summary>
            A file format from the Joint Photographic Experts Group ISO/IEC 15444-1
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Jpx">
            <summary>
            A file format from the Joint Photographic Experts Group ISO/IEC 15444-2
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.Dejavu">
            <summary>
            A file format from LizardTech
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.PdfA">
            <summary>
            A file format from Adobe PDF/A, Version 1
            </summary>
        </member>
        <member name="F:NTwain.Data.FileFormat.PdfA2">
            <summary>
            A file format from Adobe PDF/A, Version 2
            </summary>
        </member>
        <member name="T:NTwain.Data.FlashedUsed">
            <summary>
            ICapFlashUsed2 values.
            Corresponds to TWFL_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FeederOrder">
            <summary>
            CapFeederOrder values.
            Corresponds to TWFO_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FeederPocket">
            <summary>
            CapFeederPocket values.
            Corresponds to TWFP_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FlipRotation">
            <summary>
            ICapFlipRotation values.
            Corresponds to TWFR_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FilterType">
            <summary>
            ICapFilter values.
            Corresponds to TWFT_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FileType">
            <summary>
            <see cref="P:NTwain.Data.TWFileSystem.FileType"/> values.
            Corresponds to TWFY_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.IccProfile">
            <summary>
            ICapIccProfile values.
            Corresponds to TWIC* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.ImageFilter">
            <summary>
            ICapImageFilter values.
            Corresponds to TWIF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.ImageMerge">
            <summary>
            ICapImageMerge values.
            Corresponds to TWIM_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.JobControl">
            <summary>
            CapJobControl values.
            Corresponds to TWJC_* values.
            </summary>
        </member>
        <member name="F:NTwain.Data.JobControl.None">
            <summary>
            No job control.
            </summary>
        </member>
        <member name="F:NTwain.Data.JobControl.IncludeContinue">
            <summary>
            Detect and include job separator and continue scanning.
            </summary>
        </member>
        <member name="F:NTwain.Data.JobControl.IncludeStop">
            <summary>
            Detect and include job separator and stop scanning.
            </summary>
        </member>
        <member name="F:NTwain.Data.JobControl.ExcludeContinue">
            <summary>
            Detect and exclude job separator and continue scanning.
            </summary>
        </member>
        <member name="F:NTwain.Data.JobControl.ExcludeStop">
            <summary>
            Detect and exclude job separator and stop scanning.
            </summary>
        </member>
        <member name="T:NTwain.Data.JpegQuality">
            <summary>
            ICapJpegQuality values.
            Corresponds to TWJQ_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.LightPath">
            <summary>
            ICapLightPath values.
            Corresponds to TWLP_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.LightSource">
            <summary>
            ICapLightSource values.
            Corresponds to TWLS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.MagType">
            <summary>
            TWEI_MAGTYPE values.
            Corresponds to TWMD_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.NoiseFilter">
            <summary>
            ICapNoiseFilter values.
            Corresponds to TWNF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.OrientationType">
            <summary>
            ICapOrientation values.
            Corresponds to TWOR_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.OverScan">
            <summary>
            ICapOverscan values.
            Corresponds to TWOV_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PaletteType">
            <summary>
            <see cref="P:NTwain.Data.TWPalette8.PaletteType"/> values.
            Corresponds to TWPA_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PlanarChunky">
            <summary>
            ICapPlanarChunky values.
            Corresponds to TWPC_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PatchCode">
            <summary>
            ICapPatchCodeSearchPriorities,
            ICapSupportedPatchCodeTypes values.
            Corresponds to TWPCH_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PixelFlavor">
            <summary>
            ICapPixelFlavor, ICapPixelFlavorCodes values.
            Corresponds to TWPF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PrinterMode">
            <summary>
            CapPrinterMode values.
            Corresponds to TWPM_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Printer">
            <summary>
            CapPrinter values.
            Corresponds to TWPR_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PrinterFontStyle">
            <summary>
            CapPrinterFontStyle values.
            Corresponds to TWPF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PrinterIndexTrigger">
            <summary>
            CapPrinterIndexTrigger values.
            Corresponds to TWCT_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PowerSupply">
            <summary>
            CapPowerSupply values.
            Corresponds to TWPS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PixelType">
            <summary>
            Also ICapAutomaticColorNonColorPixelType (bw/gray),
            ICapJpegPixelType, ICapPixelType values.
            Corresponds to TWPT_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Segmented">
            <summary>
            CapSegmented values.
            Corresponds to TWSG_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.FilmType">
            <summary>
            ICapFilmType values.
            Corresponds to TWFM_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DoubleFeedDetection">
            <summary>
            CapDoubleFeedDetection values.
            Corresponds to TWDF_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DoubleFeedDetectionSensitivity">
            <summary>
            CapDoubleFeedDetectionSensitivity values.
            Corresponds to TWUS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DoubleFeedDetectionResponse">
            <summary>
            CapDoubleFeedDetectionResponse values.
            Corresponds to TWDP_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Mirror">
            <summary>
            ICapMirror values.
            Corresponds to TWMR* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.JpegSubsampling">
            <summary>
            ICapJpegSubsampling values.
            Corresponds to TWJS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.PaperHandling">
            <summary>
            CapPaperHandling values.
            Corresponds to TWPH_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.IndicatorsMode">
            <summary>
            CapIndicatorsMode values.
            Corresponds to TWCI_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.SupportedSize">
            <summary>
            ICapSupportedSizes values.
            Corresponds to TWSS_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.XferMech">
            <summary>
            ICapXferMech, ACapXferMech values.
            Corresponds to TWSX_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Unit">
            <summary>
            ICapUnits values.
            Corresponds to TWUN_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Country">
            <summary>
            Corresponds to TWCY_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.Language">
            <summary>
            Corresponds to TWLG_* values.
            </summary>
        </member>
        <member name="T:NTwain.Data.DataGroups">
            <summary>
            Corresponds to DG_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.DataFunctionalities">
            <summary>
            Corresponds to DF_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.DataArgumentType">
            <summary>
            Corresponds to DAT_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.Message">
            <summary>
            Corresponds to MSG_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.CapabilityId">
            <summary>
            Indicates the type of capability.
            </summary>
        </member>
        <member name="T:NTwain.Data.ExtendedImageInfo">
            <summary>
            Extended Image Info Attributes.
            Corresponds to TWEI_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.EndXferJob">
            <summary>
            EndXfer job control values.
            Corresponds to TWEJ_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.ReturnCode">
            <summary>
            Corresponds to TWRC_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.ConditionCode">
            <summary>
            Corresponds to TWCC_*.
            </summary>
        </member>
        <member name="T:NTwain.Data.QuerySupports">
            <summary>
            Bit mask for querying the operation that are supported by the data source on a capability.
            Corresponds to TWQC_*.
            </summary>
        </member>
        <member name="F:NTwain.Data.QuerySupports.Machine">
            <summary>
            Cap applies to entire session/machine.
            </summary>
        </member>
        <member name="F:NTwain.Data.QuerySupports.Bitonal">
            <summary>
            Cap applies to bitonal cameras.
            </summary>
        </member>
        <member name="F:NTwain.Data.QuerySupports.Color">
            <summary>
            Cap applies to color cameras.
            </summary>
        </member>
        <member name="T:NTwain.Data.BoolType">
            <summary>
            TWAIN's boolean values.
            </summary>
        </member>
        <member name="F:NTwain.Data.BoolType.False">
            <summary>
            The false value (0).
            </summary>
        </member>
        <member name="F:NTwain.Data.BoolType.True">
            <summary>
            The true value (1).
            </summary>
        </member>
        <member name="T:NTwain.Data.TwainConst">
            <summary>
            Contains direct magic values for some TWAIN stuff.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.String32">
            <summary>
            Length of an array that holds TW_STR32.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.String64">
            <summary>
            Length of an array that holds TW_STR64.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.String128">
            <summary>
            Length of an array that holds TW_STR128.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.String255">
            <summary>
            Length of an array that holds TW_STR255.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.DoNotCare8">
            <summary>
            Don't care value for 8 bit types.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.DoNotCare16">
            <summary>
            Don't care value for 16 bit types.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.DoNotCare32">
            <summary>
            Don't care value for 32 bit types.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.ProtocolMajor">
            <summary>
            The major version number of TWAIN supported by this library.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.ProtocolMinor">
            <summary>
            The minor version number of TWAIN supported by this library.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.True">
            <summary>
            Value for false where applicable.
            </summary>
        </member>
        <member name="F:NTwain.Data.TwainConst.False">
            <summary>
            Value for true where applicable.
            </summary>
        </member>
        <member name="T:NTwain.Data.ValueExtensions">
            <summary>
            Contains extension methods for converting (possibly bad) integer values to enum values.
            </summary>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.CastToEnum``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Casts a list of objects to a list of specified enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.CastToEnum``1(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Casts a list of objects to a list of specified enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="list">The list.</param>
            <param name="tryUpperWord">set to <c>true</c> for working with bad values.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.ConvertToEnum``1(System.Object)">
            <summary>
            Casts an objects to the specified enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.ConvertToEnum``1(System.Object,System.Boolean)">
            <summary>
            Casts an objects to the specified enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="tryUpperWord">if set to <c>true</c> [try upper word].</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.ConvertToFix32(System.Object)">
            <summary>
            Tries to convert a value to <see cref="T:NTwain.Data.TWFix32"/> if possible.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.ConvertToFrame(System.Object)">
            <summary>
            Tries to cast a value to <see cref="T:NTwain.Data.TWFrame"/> if possible.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Data.ValueExtensions.ConvertToString(System.Object)">
            <summary>
            Converts object to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.DeviceEventArgs">
            <summary>
            Contains event data for a TWAIN source hardware event.
            </summary>
        </member>
        <member name="M:NTwain.DeviceEventArgs.#ctor(NTwain.Data.TWDeviceEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.DeviceEventArgs"/> class.
            </summary>
            <param name="deviceEvent">The device event.</param>
        </member>
        <member name="P:NTwain.DeviceEventArgs.DeviceEvent">
            <summary>
            Gets the detailed device event.
            </summary>
            <value>The device event.</value>
        </member>
        <member name="T:NTwain.ICapabilities">
            <summary>
            Exposes capabilities of a data source as properties.
            </summary>
        </member>
        <member name="P:NTwain.ICapabilities.ACapXferMech">
            <summary>
            Gets the property to work with audio <see cref="T:NTwain.Data.XferMech"/> for the current source.
            </summary>
            <value>
            The audio xfer mech.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAlarms">
            <summary>
            Gets the property to work with alarms for the current source.
            </summary>
            <value>
            The alarms.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAlarmVolume">
            <summary>
            Gets the property to work with alarm volume for the current source.
            </summary>
            <value>
            The alarm volume.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAuthor">
            <summary>
            Gets the property to work with the name or other identifying information about the 
            Author of the image. It may include a copyright string.
            </summary>
            <value>
            The author string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAutoFeed">
            <summary>
            Gets the property to work with auto feed page flag for the current source.
            </summary>
            <value>
            The auto feed flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAutomaticCapture">
            <summary>
            Gets the property to work with auto capture count for the current source.
            </summary>
            <value>
            The auto capture count.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAutomaticSenseMedium">
            <summary>
            Gets the property to work with auto-sense medium (paper source) flag.
            </summary>
            <value>
            The auto-sense medium flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapAutoScan">
            <summary>
            Gets the property to work with auto scan page flag for the current source.
            </summary>
            <value>
            The auto scan flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapBatteryMinutes">
            <summary>
            Gets the property to see the remaining battery power for the device.
            </summary>
            <value>
            The battery minutes.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapBatteryPercentage">
            <summary>
            Gets the property to see the remaining battery percentage for the device.
            </summary>
            <value>
            The battery percentage.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCameraEnabled">
            <summary>
            Gets the property to work with camera enabled flag.
            </summary>
            <value>
            The camera enabled flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCameraOrder">
            <summary>
            Gets the property to work with camera order for the current source.
            </summary>
            <value>
            The camera order setting.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCameraPreviewUI">
            <summary>
            Gets the property to see whether device supports camera preview UI flag.
            </summary>
            <value>
            The camera preview UI flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCameraSide">
            <summary>
            Gets the property to work with camera side for the current source.
            </summary>
            <value>
            The camera side.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCaption">
            <summary>
            Gets the property to work with the general note about the acquired image.
            </summary>
            <value>
            The general note string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapClearBuffers">
            <summary>
            Gets the property to work with the clear buffers option for the current source.
            </summary>
            <value>
            The clear buffers option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapClearPage">
            <summary>
            Gets the property to work with clear page flag for the current source.
            </summary>
            <value>
            The clear page flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCustomDSData">
            <summary>
            Gets the property to see whether device supports custom data triplets.
            </summary>
            <value>
            The custom data flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapCustomInterfaceGuid">
            <summary>
            Gets the property for device interface guid.
            </summary>
            <value>
            The device interface guid.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDeviceEvent">
            <summary>
            Gets the property to work with the reported device events for the current source.
            </summary>
            <value>
            The reported device events.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDeviceOnline">
            <summary>
            Gets the property to work with devince online flag for the current source.
            </summary>
            <value>
            The devince online flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDeviceTimeDate">
            <summary>
            Gets the property to work with the device's time and date.
            </summary>
            <value>
            The device time and date.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDoubleFeedDetection">
            <summary>
            Gets the property to work with double feed detection option for the current source.
            </summary>
            <value>
            The double feed detection option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDoubleFeedDetectionLength">
            <summary>
            Gets the property to work with double feed detection length for the current source.
            </summary>
            <value>
            The double feed detection length.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDoubleFeedDetectionResponse">
            <summary>
            Gets the property to work with double feed detection response for the current source.
            </summary>
            <value>
            The double feed detection response.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDoubleFeedDetectionSensitivity">
            <summary>
            Gets the property to work with double feed detection sensitivity for the current source.
            </summary>
            <value>
            The double feed detection sensitivity.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDuplex">
            <summary>
            Gets the property to see what's the duplex mode for the current source.
            </summary>
            <value>
            The duplex mode.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapDuplexEnabled">
            <summary>
            Gets the property to work with duplex enabled flag for the current source.
            </summary>
            <value>
            The duplex enabled flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapEnableDSUIOnly">
            <summary>
            Gets the property to see whether device supports UI only flag (no transfer).
            </summary>
            <value>
            The UI only flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapEndorser">
            <summary>
            Gets the property to work with endorser for the current source.
            </summary>
            <value>
            The endorser option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapExtendedCaps">
            <summary>
            Gets the extended caps for the current source.
            </summary>
            <value>
            The extended caps.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederAlignment">
            <summary>
            Gets the property to work with feeder alignment for the current source.
            </summary>
            <value>
            The feeder alignment.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederEnabled">
            <summary>
            Gets the property to work with feeder enabled flag for the current source.
            </summary>
            <value>
            The feeder enabled flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederLoaded">
            <summary>
            Gets the property to work with feeder loaded flag for the current source.
            </summary>
            <value>
            The feeder loaded flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederOrder">
            <summary>
            Gets the property to work with feeder order for the current source.
            </summary>
            <value>
            The feeder order.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederPocket">
            <summary>
            Gets the property to work with feeder pocket for the current source.
            </summary>
            <value>
            The feeder pocket setting.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeederPrep">
            <summary>
            Gets the property to work with feeder prep flag.
            </summary>
            <value>
            The feeder prep flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapFeedPage">
            <summary>
            Gets the property to work with feed page flag for the current source.
            </summary>
            <value>
            The feed page flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapIndicators">
            <summary>
            Gets the property to work with indicators flag for the current source.
            </summary>
            <value>
            The indicators flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapIndicatorsMode">
            <summary>
            Gets the property to work with diplayed indicators for the current source.
            </summary>
            <value>
            The diplayed indicators.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapJobControl">
            <summary>
            Gets the property to work with job control option for the current source.
            </summary>
            <value>
            The job control option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapLanguage">
            <summary>
            Gets the property to work with string data language for the current source.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapMaxBatchBuffers">
            <summary>
            Gets the property to work with the max buffered pages for the current source.
            </summary>
            <value>
            The max batch buffered pages.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapMicrEnabled">
            <summary>
            Gets the property to work with check scanning support flag.
            </summary>
            <value>
            The check scanning support flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPaperDetectable">
            <summary>
            Gets the property to work with paper sensor flag for the current source.
            </summary>
            <value>
            The paper sensor flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPaperHandling">
            <summary>
            Gets the property to work with paper handling option for the current source.
            </summary>
            <value>
            The paper handling option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPowerSaveTime">
            <summary>
            Gets the property to work with camera power down time (seconds) for the current source.
            </summary>
            <value>
            The camera power down time.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPowerSupply">
            <summary>
            Gets the property to see current device's power supply.
            </summary>
            <value>
            The power supply indicator.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinter">
            <summary>
            Gets the property to work with printer list for the current source.
            </summary>
            <value>
            The printer list.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterCharRotation">
            <summary>
            Gets the property to work with printer character rotation for the current source.
            </summary>
            <value>
            The printer character rotation.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterEnabled">
            <summary>
            Gets the property to work with printer enabled flag.
            </summary>
            <value>
            The printer enabled flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterFontStyle">
            <summary>
            Gets the property to work with printer font style for the current source.
            </summary>
            <value>
            The printer font style.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndex">
            <summary>
            Gets the property to work with the starting printer index for the current source.
            </summary>
            <value>
            The printer index.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndexLeadChar">
            <summary>
            Set the character to be used for filling the leading digits before the counter value if the
            counter digits are fewer than <see cref="P:NTwain.ICapabilities.CapPrinterIndexNumDigits"/>.
            </summary>
            <value>
            The printer leading string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndexMaxValue">
            <summary>
            Gets the property to work with printer index max value for the current source.
            </summary>
            <value>
            The printer index max value.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndexNumDigits">
            <summary>
            Gets the property to work with printer number digits value for the current source.
            </summary>
            <value>
            The printer number digits value.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndexStep">
            <summary>
            Gets the property to work with printer index step value for the current source.
            </summary>
            <value>
            The printer index step value.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterIndexTrigger">
            <summary>
            Gets the property to work with printer index trigger for the current source.
            </summary>
            <value>
            The printer index trigger.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterMode">
            <summary>
            Gets the property to work with printer mode for the current source.
            </summary>
            <value>
            The printer mode.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterString">
            <summary>
            Specifies the string(s) that are to be used in the string component when the current <see cref="P:NTwain.ICapabilities.CapPrinter"/>
            device is enabled.
            </summary>
            <value>
            The printer string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterStringPreview">
            <summary>
            Gets the next print values.
            </summary>
            <value>
            The next print values.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterSuffix">
            <summary>
            Specifies the string that shall be used as the current <see cref="P:NTwain.ICapabilities.CapPrinter"/> device’s suffix.
            </summary>
            <value>
            The printer suffix string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapPrinterVerticalOffset">
            <summary>
            Gets the property to work with printer y-offset for the current source.
            </summary>
            <value>
            The printer y-offset.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapReacquireAllowed">
            <summary>
            Gets the property to see whether device supports reacquire flag.
            </summary>
            <value>
            The reacquire flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapRewindPage">
            <summary>
            Gets the property to work with rewind page flag for the current source.
            </summary>
            <value>
            The rewind page flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapSegmented">
            <summary>
            Gets the property to work with segmentation setting for the current source.
            </summary>
            <value>
            The segmentation setting.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapSerialNumber">
            <summary>
            Gets the property for device serial number.
            </summary>
            <value>
            The device serial number.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapSupportedCaps">
            <summary>
            Gets the supported caps for the current source. This is not supported by all sources.
            </summary>
            <value>
            The supported caps.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapSupportedCapsSegmentUnique">
            <summary>
            Gets the supported caps for unique segments for the current source.
            </summary>
            <value>
            The supported caps for unique segments.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapSupportedDATs">
            <summary>
            Gets the supported caps for supported DATs.
            </summary>
            <value>
            The supported DATs.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapThumbnailsEnabled">
            <summary>
            Gets the property to work with thumbnails enabled flag for the current source.
            </summary>
            <value>
            The thumbnails enabled flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapTimeBeforeFirstCapture">
            <summary>
            Gets the property to work with the time before first capture (milliseconds) for the current source.
            </summary>
            <value>
            The time before first capture.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapTimeBetweenCaptures">
            <summary>
            Gets the property to work with the time between captures (milliseconds) for the current source.
            </summary>
            <value>
            The time between captures.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapTimeDate">
            <summary>
            Gets the property to get the image acquired time and date.
            </summary>
            <value>
            The time and date string.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapUIControllable">
            <summary>
            Gets the property to work with UI controllable flag for the current source.
            </summary>
            <value>
            The UI controllable flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.CapXferCount">
            <summary>
            Gets the property to work with xfer count for the current source.
            </summary>
            <value>
            The xfer count.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutoBright">
            <summary>
            Gets the property to work with image auto brightness flag for the current source.
            </summary>
            <value>
            The image auto brightness flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutoDiscardBlankPages">
            <summary>
            Gets the property to work with image blank page behavior for the current source.
            </summary>
            <value>
            The image blank page behavior.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticBorderDetection">
            <summary>
            Gets the property to work with auto border detection flag for the current source.
            </summary>
            <value>
            The auto border detection flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticColorEnabled">
            <summary>
            Gets the property to work with image auto color detection flag for the current source.
            </summary>
            <value>
            The image auto color detection flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticColorNonColorPixelType">
            <summary>
            Gets the property to work with image auto non-color pixel type for the current source.
            </summary>
            <value>
            The image auto non-color pixel type.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticCropUsesFrame">
            <summary>
            Gets the property to work with image auto crop flag for the current source.
            </summary>
            <value>
            The image auto crop flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticDeskew">
            <summary>
            Gets the property to work with image auto deskew flag for the current source.
            </summary>
            <value>
            The image auto deskew flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticLengthDetection">
            <summary>
            Gets the property to work with image auto length detection flag for the current source.
            </summary>
            <value>
            The image auto length detection flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutomaticRotate">
            <summary>
            Gets the property to work with image auto rotate flag for the current source.
            </summary>
            <value>
            The image auto rotate flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapAutoSize">
            <summary>
            Gets the property to work with image auto size option for the current source.
            </summary>
            <value>
            The image auto size option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeDetectionEnabled">
            <summary>
            Gets the property to work with image barcode detection flag for the current source.
            </summary>
            <value>
            The image barcode detection flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeMaxRetries">
            <summary>
            Gets the property to work with image barcode max search retries for the current source.
            </summary>
            <value>
            The image barcode max search retries.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeMaxSearchPriorities">
            <summary>
            Gets the property to work with image barcode max search priorities for the current source.
            </summary>
            <value>
            The image barcode max search priorities.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeSearchMode">
            <summary>
            Gets the property to work with image barcode search direction for the current source.
            </summary>
            <value>
            The image barcode search direction.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeSearchPriorities">
            <summary>
            Gets the property to work with image barcode search priority for the current source.
            </summary>
            <value>
            The image barcode search priority.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBarcodeTimeout">
            <summary>
            Gets the property to work with image barcode max search timeout for the current source.
            </summary>
            <value>
            The image barcode max search timeout.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBitDepth">
            <summary>
            Gets the property to work with image bit depth for the current source.
            </summary>
            <value>
            The image bit depth.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBitDepthReduction">
            <summary>
            Gets the property to work with image bit depth reduction method for the current source.
            </summary>
            <value>
            The image bit depth reduction method.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBitOrder">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.BitOrder"/> for the current source.
            </summary>
            <value>
            The image bit order.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBitOrderCodes">
            <summary>
            Gets the property to work with image CCITT compression <see cref="T:NTwain.Data.BitOrder"/> for the current source.
            </summary>
            <value>
            The image bit order for CCITT compression.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapBrightness">
            <summary>
            Gets the property to work with image brightness for the current source.
            </summary>
            <value>
            The image brightness.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapCCITTKFactor">
            <summary>
            Gets the property to work with image CCITT K factor for the current source.
            </summary>
            <value>
            The image CCITT K factor.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapColorManagementEnabled">
            <summary>
            Gets the property to work with image color management flag for the current source.
            </summary>
            <value>
            The image color management flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapCompression">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.CompressionType"/> for the current source.
            </summary>
            <value>
            The image compression.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapContrast">
            <summary>
            Gets the property to work with image contrast for the current source.
            </summary>
            <value>
            The image contrast.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapCustHalftone">
            <summary>
            Gets the property to work with image square-cell halftone for the current source.
            </summary>
            <value>
            The image square-cell halftone.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapExposureTime">
            <summary>
            Gets the property to work with image exposure time (in seconds) for the current source.
            </summary>
            <value>
            The image exposure time.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapExtImageInfo">
            <summary>
            Gets the property to work with ext image info flag for the current source.
            </summary>
            <value>
            The ext image info flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFeederType">
            <summary>
            Gets the property to work with feeder type for the current source.
            </summary>
            <value>
            The feeder type.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFilmType">
            <summary>
            Gets the property to work with image film type for the current source.
            </summary>
            <value>
            The image film type.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFilter">
            <summary>
            Gets the property to work with image color filter for the current source.
            </summary>
            <value>
            The image color filter type.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFlashUsed2">
            <summary>
            Gets the property to work with flash option for the current source.
            </summary>
            <value>
            The flash option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFlipRotation">
            <summary>
            Gets the property to work with image flip-rotation behavior for the current source.
            </summary>
            <value>
            The image flip-rotation behavior.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapFrames">
            <summary>
            Gets the property to work with the list of frames the source will acquire on each page.
            </summary>
            <value>
            The capture frames.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapGamma">
            <summary>
            Gets the property to work with image gamma value for the current source.
            </summary>
            <value>
            The image gamma.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapHalftones">
            <summary>
            Gets the property to work with image halftone patterns for the current source.
            </summary>
            <value>
            The image halftone patterns.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapHighlight">
            <summary>
            Gets the property to work with image highlight value for the current source.
            </summary>
            <value>
            The image highlight.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapICCProfile">
            <summary>
            Gets the property to work with image icc profile for the current source.
            </summary>
            <value>
            The image icc profile.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapImageDataSet">
            <summary>
            Gets or sets the image indices that will be delivered during the standard image transfer done in
            States 6 and 7.
            </summary>
            <value>
            The image indicies.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapImageFileFormat">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.FileFormat"/> for the current source.
            </summary>
            <value>
            The image file format.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapImageFilter">
            <summary>
            Gets the property to work with image enhancement filter for the current source.
            </summary>
            <value>
            The image enhancement filter.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapImageMerge">
            <summary>
            Gets the property to work with image merge option for the current source.
            </summary>
            <value>
            The image merge option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapImageMergeHeightThreshold">
            <summary>
            Gets the property to work with image merge height threshold for the current source.
            </summary>
            <value>
            The image merge height threshold.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapJpegPixelType">
            <summary>
            Gets the property to work with image jpeg compression <see cref="T:NTwain.Data.PixelType"/> for the current source.
            </summary>
            <value>
            The image pixel type for jpeg compression.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapJpegQuality">
            <summary>
            Gets the property to work with image jpeg quality for the current source.
            </summary>
            <value>
            The image jpeg quality.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapJpegSubsampling">
            <summary>
            Gets the property to work with image jpeg sub sampling for the current source.
            </summary>
            <value>
            The image jpeg sub sampling.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapLampState">
            <summary>
            Gets the property to work with image lamp state flag for the current source.
            </summary>
            <value>
            The image lamp state flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapLightPath">
            <summary>
            Gets the property to work with image light path for the current source.
            </summary>
            <value>
            The image light path.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapLightSource">
            <summary>
            Gets the property to work with image light source for the current source.
            </summary>
            <value>
            The image light source.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapMaxFrames">
            <summary>
            Gets the property to work with image max frames for the current source.
            </summary>
            <value>
            The image max frames.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapMinimumHeight">
            <summary>
            Gets the property to work with image minimum height for the current source.
            </summary>
            <value>
            The image minimumm height.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapMinimumWidth">
            <summary>
            Gets the property to work with image minimum width for the current source.
            </summary>
            <value>
            The image minimumm width.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapMirror">
            <summary>
            Gets the property to work with image mirror option for the current source.
            </summary>
            <value>
            The image mirror option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapNoiseFilter">
            <summary>
            Gets the property to work with image noise filter for the current source.
            </summary>
            <value>
            The image noise filter.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapOrientation">
            <summary>
            Gets the property to work with image orientation for the current source.
            </summary>
            <value>
            The image orientation.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapOverScan">
            <summary>
            Gets the property to work with image overscan option for the current source.
            </summary>
            <value>
            The image overscan option.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeDetectionEnabled">
            <summary>
            Gets the property to work with image patch code detection flag for the current source.
            </summary>
            <value>
            The image patch code detection flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeMaxRetries">
            <summary>
            Gets the property to work with image patch code max search retries for the current source.
            </summary>
            <value>
            The image patch code max search retries.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeMaxSearchPriorities">
            <summary>
            Gets the property to work with image patch code max search priorities for the current source.
            </summary>
            <value>
            The image patch code max search priorities.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeSearchMode">
            <summary>
            Gets the property to work with image patch code search direction for the current source.
            </summary>
            <value>
            The image patch code search direction.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeSearchPriorities">
            <summary>
            Gets the property to work with image patch code search priority for the current source.
            </summary>
            <value>
            The image patch code search priority.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPatchCodeTimeout">
            <summary>
            Gets the property to work with image patch code max search timeout for the current source.
            </summary>
            <value>
            The image patch code max search timeout.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPhysicalHeight">
            <summary>
            Gets the property to work with image physical height for the current source.
            </summary>
            <value>
            The image physical height.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPhysicalWidth">
            <summary>
            Gets the property to work with image physical width for the current source.
            </summary>
            <value>
            The image physical width.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPixelFlavor">
            <summary>
            Gets the property to work with image pixel flavor for the current source.
            </summary>
            <value>
            The image pixel flavor.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPixelFlavorCodes">
            <summary>
            Gets the property to work with image CCITT compression <see cref="T:NTwain.Data.PixelFlavor"/> for the current source.
            </summary>
            <value>
            The image pixel flavor for CCITT compression.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPixelType">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.PixelType"/> for the current source.
            </summary>
            <value>
            The image pixel type.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapPlanarChunky">
            <summary>
            Gets the property to work with image color format for the current source.
            </summary>
            <value>
            The image color format.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapRotation">
            <summary>
            Gets the property to work with image rotation for the current source.
            </summary>
            <value>
            The image rotation.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapShadow">
            <summary>
            Gets the property to work with image shadow value for the current source.
            </summary>
            <value>
            The image shadow.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapSupportedBarcodeTypes">
            <summary>
            Gets the property to work with image barcode types for the current source.
            </summary>
            <value>
            The image barcode types.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapSupportedExtImageInfo">
            <summary>
            Gets the property to get supported ext image info for the current source.
            </summary>
            <value>
            The supported ext image info.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapSupportedPatchCodeTypes">
            <summary>
            Gets the property to work with image patch code types for the current source.
            </summary>
            <value>
            The image patch code types.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapSupportedSizes">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.SupportedSize"/> for the current source.
            </summary>
            <value>
            The image supported size.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapThreshold">
            <summary>
            Gets the property to work with image threshold for the current source.
            </summary>
            <value>
            The image threshold.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapTiles">
            <summary>
            Gets the property to work with image tiles flag for the current source.
            </summary>
            <value>
            The image tiles flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapTimeFill">
            <summary>
            Gets the property to work with image CCITT time fill for the current source.
            </summary>
            <value>
            The image CCITT time fill.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapUndefinedImageSize">
            <summary>
            Gets the property to work with image undefined size flag for the current source.
            </summary>
            <value>
            The image undefined size flag.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapUnits">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.Unit"/> for the current source.
            </summary>
            <value>
            The image unit of measure.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapXferMech">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.XferMech"/> for the current source.
            </summary>
            <value>
            The image xfer mech.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapXNativeResolution">
            <summary>
            Gets the property to work with image's native x-axis resolution for the current source.
            </summary>
            <value>
            The image's native x-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapXResolution">
            <summary>
            Gets the property to work with image x-axis resolution for the current source.
            </summary>
            <value>
            The image x-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapXScaling">
            <summary>
            Gets the property to work with image x-axis scaling for the current source.
            </summary>
            <value>
            The image x-axis scaling.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapYNativeResolution">
            <summary>
            Gets the property to work with image's native y-axis resolution for the current source.
            </summary>
            <value>
            The image's native y-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapYResolution">
            <summary>
            Gets the property to work with image y-axis resolution for the current source.
            </summary>
            <value>
            The image y-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapYScaling">
            <summary>
            Gets the property to work with image y-axis scaling for the current source.
            </summary>
            <value>
            The image y-axis scaling.
            </value>
        </member>
        <member name="P:NTwain.ICapabilities.ICapZoomFactor">
            <summary>
            Gets the property to work with image zoom factor for the current source.
            </summary>
            <value>
            The image zoom factor.
            </value>
        </member>
        <member name="M:NTwain.ICapabilities.GetCurrent(NTwain.Data.CapabilityId)">
            <summary>
            Gets the current value for a capability.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.GetDefault(NTwain.Data.CapabilityId)">
            <summary>
            Gets the default value for a capability.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.GetValues(NTwain.Data.CapabilityId)">
            <summary>
            A general method that tries to get capability values from current <see cref="T:NTwain.DataSource" />.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.GetValuesRaw(NTwain.Data.CapabilityId)">
            <summary>
            Gets all the possible values of this capability without expanding.
            This may be required to work with large range values that cannot be safely enumerated
            with <see cref="M:NTwain.ICapabilities.GetValues(NTwain.Data.CapabilityId)"/>.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.QuerySupport(NTwain.Data.CapabilityId)">
            <summary>
            Gets the actual supported operations for a capability. This is not supported by all sources.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.Reset(NTwain.Data.CapabilityId)">
            <summary>
            Resets the current value to power-on default.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapabilities.ResetAll">
            <summary>
            Resets all values and constraint to power-on defaults.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.IDataSource">
            <summary>
            Represents a TWAIN data source.
            </summary>
        </member>
        <member name="P:NTwain.IDataSource.Id">
            <summary>
            Gets the id of the source.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.Name">
            <summary>
            Gets the source's product name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.DataGroup">
            <summary>
            Gets the supported data group.
            </summary>
            <value>
            The data group.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.Manufacturer">
            <summary>
            Gets the source's manufacturer name.
            </summary>
            <value>
            The manufacturer.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.ProductFamily">
            <summary>
            Gets the source's product family.
            </summary>
            <value>
            The product family.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.ProtocolVersion">
            <summary>
            Gets the supported TWAIN protocol version.
            </summary>
            <value>
            The protocol version.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.Version">
            <summary>
            Gets the source's version information.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.IsOpen">
            <summary>
            Gets a value indicating whether this data source has been opened.
            </summary>
            <value>
              <c>true</c> if this data source is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.Capabilities">
            <summary>
            Gets the capabilities for this data source.
            </summary>
            <value>
            The capabilities.
            </value>
        </member>
        <member name="P:NTwain.IDataSource.Settings">
            <summary>
            Gets or sets the current settings (CustomDSData) of this source if supported.
            </summary>
            <value>
            The source settings.
            </value>
        </member>
        <member name="M:NTwain.IDataSource.Open">
            <summary>
            Opens the source for capability negotiation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IDataSource.Close">
            <summary>
            Closes the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IDataSource.Enable(NTwain.SourceEnableMode,System.Boolean,System.IntPtr)">
            <summary>
            Enables the source to start transferring.
            </summary>
            <param name="mode">The mode.</param>
            <param name="modal">if set to <c>true</c> any driver UI will display as modal.</param>
            <param name="windowHandle">The window handle if modal.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.IDataSource.GetStatus">
            <summary>
            Gets the source status. Only call this at state 4 or higher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IDataSource.GetStatusUtf8(NTwain.Data.TWStatus)">
            <summary>
            Gets the source status string. Only call this at state 4 or higher.
            </summary>
            <param name="status">Status from previous calls.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.ILog">
            <summary>
            Simple log interface used by NTwain.
            </summary>
        </member>
        <member name="P:NTwain.ILog.IsInfoEnabled">
            <summary>
            Gets or sets a value indicating whether info messages will be logged.
            </summary>
            <value>
            <c>true</c> to enable info logging.
            </value>
        </member>
        <member name="P:NTwain.ILog.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether debug messages will be logged.
            </summary>
            <value>
            <c>true</c> to enable debug logging.
            </value>
        </member>
        <member name="P:NTwain.ILog.IsErrorEnabled">
            <summary>
            Gets or sets a value indicating whether error messages will be logged.
            </summary>
            <value>
            <c>true</c> to enable error logging.
            </value>
        </member>
        <member name="M:NTwain.ILog.Info(System.String)">
            <summary>
            Logs info type message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NTwain.ILog.Info(System.String,System.Object[])">
            <summary>
            Logs info type message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NTwain.ILog.Debug(System.String)">
            <summary>
            Logs debug type message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NTwain.ILog.Debug(System.String,System.Object[])">
            <summary>
            Logs debug type message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NTwain.ILog.Error(System.String)">
            <summary>
            Logs error type message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NTwain.ILog.Error(System.String,System.Exception)">
            <summary>
            Logs error type message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:NTwain.ILog.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Logs error type message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NTwain.Internals.Extensions.VerifyLengthUnder(System.String,System.Int32)">
            <summary>
            Verifies the string length is under the maximum length
            and throws <see cref="T:System.ArgumentException"/> if violated.
            </summary>
            <param name="value">The value.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:NTwain.Internals.Extensions.VerifyState(NTwain.Internals.ITwainSessionInternal,System.Int32,System.Int32,NTwain.Data.DataGroups,NTwain.Data.DataArgumentType,NTwain.Data.Message)">
            <summary>
            Verifies the session is within the specified state range (inclusive). Throws
            <see cref="T:NTwain.TwainStateException" /> if violated.
            </summary>
            <param name="session">The session.</param>
            <param name="allowedMinimum">The allowed minimum.</param>
            <param name="allowedMaximum">The allowed maximum.</param>
            <param name="group">The triplet data group.</param>
            <param name="dataArgumentType">The triplet data argument type.</param>
            <param name="message">The triplet message.</param>
            <exception cref="T:NTwain.TwainStateException"></exception>
        </member>
        <member name="T:NTwain.Internals.ICommittable">
            <summary>
            For something that is in a pending state until finalized with a Commit() call.
            The changes are rolled back if it is disposed without being committed.
            </summary>
        </member>
        <member name="M:NTwain.Internals.ICommittable.Commit">
            <summary>
            Commits the pending changes.
            </summary>
        </member>
        <member name="T:NTwain.Internals.InternalMessageLoopHook">
            <summary>
            This is the self-hosted message loop for TWAIN communication.
            It utilizes the wpf Dispatcher to do all the hard work.
            </summary>
        </member>
        <member name="T:NTwain.Internals.ITwainSessionInternal">
            <summary>
            Extends <see cref="T:NTwain.ITwainSession"/> with extra stuff for internal use.
            </summary>
        </member>
        <member name="P:NTwain.Internals.ITwainSessionInternal.AppId">
            <summary>
            Gets the app id used for the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Internals.ITwainSessionInternal.ChangeState(System.Int32,System.Boolean)">
            <summary>
            Changes the state right away.
            </summary>
            <param name="newState">The new state.</param>
            <param name="notifyChange">if set to <c>true</c> to notify change.</param>
        </member>
        <member name="M:NTwain.Internals.ITwainSessionInternal.GetPendingStateChanger(System.Int32)">
            <summary>
            Gets the pending state changer and tentatively changes the session state to the specified value.
            Value will only stick if committed.
            </summary>
            <param name="newState">The new state.</param>
            <returns></returns>
        </member>
        <member name="P:NTwain.Internals.ITwainSessionInternal.DGAudio">
            <summary>
            Gets the triplet operations defined for audio data group.
            </summary>
        </member>
        <member name="T:NTwain.Internals.TransferLogic">
            <summary>
            Contains the actual data transfer logic since TwainSession is getting too large.
            </summary>
        </member>
        <member name="M:NTwain.Internals.TransferLogic.DoTransferRoutine(NTwain.Internals.ITwainSessionInternal)">
            <summary>
            Performs the TWAIN transfer routine at state 6. 
            </summary>
        </member>
        <member name="T:NTwain.Internals.WindowsHook">
            <summary>
            Abstracts out wnd proc hook on Windows from InternalMessageLoopHook class.
            This allows things to not depend on PresentationCore.dll at runtime on mono.
            </summary>
        </member>
        <member name="T:NTwain.Internals.WinMemoryManager">
            <summary>
            Provides methods for managing memory on data exchanged with twain sources using old win32 methods.
            </summary>
        </member>
        <member name="T:NTwain.Internals.IWinMessageFilter">
            <summary>
            Interface for something that can check whether messages from WndProc is a TWAIN message and already handled.
            </summary>
        </member>
        <member name="M:NTwain.Internals.IWinMessageFilter.IsTwainMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Checks and handle the message if it's a TWAIN message.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="msg">The message.</param>
            <param name="wParam">The w parameter.</param>
            <param name="lParam">The l parameter.</param>
            <returns>true if handled internally.</returns>
        </member>
        <member name="T:NTwain.DataTransferredEventArgs">
            <summary>
            Contains event data after whatever data from the source has been transferred.
            </summary>
        </member>
        <member name="M:NTwain.DataTransferredEventArgs.#ctor(NTwain.DataSource,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.DataTransferredEventArgs" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="nativeData">The native data.</param>
        </member>
        <member name="M:NTwain.DataTransferredEventArgs.#ctor(NTwain.DataSource,System.String,NTwain.Data.FileFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.DataTransferredEventArgs" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="fileDataPath">The file data path.</param>
            <param name="imageFileFormat">The image file format.</param>
        </member>
        <member name="M:NTwain.DataTransferredEventArgs.#ctor(NTwain.DataSource,NTwain.Data.TWImageMemXfer,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.DataTransferredEventArgs" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="memoryInfo">The memory information.</param>
            <param name="memoryData">The memory data.</param>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.TransferType">
            <summary>
            Gets the type of the transfer mode.
            </summary>
            <value>
            The type of the transfer.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.NativeData">
            <summary>
            Gets the raw pointer to the complete data if <see cref="P:NTwain.DataTransferredEventArgs.TransferType"/> is <see cref="F:NTwain.Data.XferMech.Native"/>.
            The data will be freed once the event handler ends
            so consumers must complete whatever processing before then.
            For image type this data is DIB (Windows) or TIFF (Linux).
            This pointer is already locked for the duration of this event.
            </summary>
            <value>The data pointer.</value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.FileDataPath">
            <summary>
            Gets the file path to the complete data if the transfer was file or memory-file.
            This is only available if <see cref="P:NTwain.DataTransferredEventArgs.TransferType"/> is <see cref="F:NTwain.Data.XferMech.File"/>.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.ImageFileFormat">
            <summary>
            Gets the file format if applicable.
            This is only available if <see cref="P:NTwain.DataTransferredEventArgs.TransferType"/> is <see cref="F:NTwain.Data.XferMech.File"/>.
            </summary>
            <value>
            The file format.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.MemoryInfo">
            <summary>
            Gets the info object if the transfer was memory. 
            This is only available if <see cref="P:NTwain.DataTransferredEventArgs.TransferType"/> is <see cref="F:NTwain.Data.XferMech.Memory"/>.
            </summary>
            <value>
            The memory information.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.MemoryData">
            <summary>
            Gets the raw memory data if the transfer was memory.
            Consumer application will need to do the parsing based on the values
            from <see cref="P:NTwain.DataTransferredEventArgs.ImageInfo"/>.
            </summary>
            <value>
            The memory data.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.ImageInfo">
            <summary>
            Gets the final image information if applicable.
            </summary>
            <value>
            The final image information.
            </value>
        </member>
        <member name="P:NTwain.DataTransferredEventArgs.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>
            The data source.
            </value>
        </member>
        <member name="M:NTwain.DataTransferredEventArgs.GetExtImageInfo(NTwain.Data.ExtendedImageInfo[])">
            <summary>
            Gets the extended image information if applicable.
            </summary>
            <param name="infoIds">The information ids.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NTwain.DataTransferredEventArgs.GetNativeImageStream">
            <summary>
            Gets the image stream from the <see cref="P:NTwain.DataTransferredEventArgs.NativeData"/> if it's an image.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.IMemoryManager">
            <summary>
            Interface that provides the correct methods for managing memory on data exchanged with TWAIN sources.
            </summary>
        </member>
        <member name="M:NTwain.IMemoryManager.Allocate(System.UInt32)">
            <summary>
            Function to allocate memory. Calls to this must be coupled with <see cref="M:NTwain.IMemoryManager.Free(System.IntPtr)"/> later.
            </summary>
            <param name="size">The size in bytes.</param>
            <returns>Handle to the allocated memory.</returns>
        </member>
        <member name="M:NTwain.IMemoryManager.Free(System.IntPtr)">
            <summary>
            Function to free memory. 
            </summary>
            <param name="handle">The handle from <see cref="M:NTwain.IMemoryManager.Allocate(System.UInt32)"/>.</param>
        </member>
        <member name="M:NTwain.IMemoryManager.Lock(System.IntPtr)">
            <summary>
            Function to lock some memory. Calls to this must be coupled with <see cref="M:NTwain.IMemoryManager.Unlock(System.IntPtr)"/> later.
            </summary>
            <param name="handle">The handle to allocated memory.</param>
            <returns>Handle to the lock.</returns>
        </member>
        <member name="M:NTwain.IMemoryManager.Unlock(System.IntPtr)">
            <summary>
            Function to unlock a previously locked memory region.
            </summary>
            <param name="handle">The same handle passed <see cref="M:NTwain.IMemoryManager.Lock(System.IntPtr)"/>.</param>
        </member>
        <member name="T:NTwain.Interop.BITMAPINFO">
            <summary>
            Defines the dimensions and color information for a DIB.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFO.bmiHeader">
            <summary>
            Structure that contains information about the dimensions of color format.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFO.bmiColors">
            <summary>
            This contains one of the following:
            1. An array of RGBQUAD. The elements of the array that make up the color table.
            2. An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of bmiColors is allowed for functions that use DIBs.
            The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.
            </summary>
        </member>
        <member name="T:NTwain.Interop.BITMAPINFOHEADER">
            <summary>
            Structure that contains information about the dimensions and color format of a DIB.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biSize">
            <summary>
            The number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biWidth">
            <summary>
            The width of the bitmap, in pixels.
            If Compression is JPEG or PNG, the Width member specifies the width of the decompressed 
            JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels. If Height is positive, 
            the bitmap is a bottom-up DIB and its origin is the lower-left corner. 
            If Height is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            If Height is negative, indicating a top-down DIB, Compression must be either RGB or BITFIELDS. Top-down DIBs cannot be compressed.
            If Compression is JPEG or PNG, the Height member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biPlanes">
            <summary>
            The number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The BitCount member 
            determines the number of bits that define each pixel and the maximum number of colors in the bitmap. 
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for RGB bitmaps.
            If Compression is JPEG or PNG, SizeImage indicates the size of the JPEG or PNG image buffer, respectively.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. 
            An application can use this value to select a bitmap from a resource group that 
            best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>
            The vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap. 
            If this value is zero, the bitmap uses the maximum number of colors corresponding to 
            the value of the BitCount member for the compression mode specified by Compression.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. 
            If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetXDpi">
            <summary>
            Gets the horizontal dpi of the bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetYDpi">
            <summary>
            Gets the vertical dpi of the bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetByteSize">
            <summary>
            Gets the size of the structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.Validate">
            <summary>
            Checks to see if this structure contain valid data.
            It also fills in any missing pieces if possible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetScan0(System.IntPtr)">
            <summary>
            Gets the pointer to scan0 given the header pointer.
            </summary>
            <param name="headerPtr">The header PTR.</param>
            <returns></returns>
        </member>
        <member name="P:NTwain.Interop.BITMAPINFOHEADER.IsBottomUpImage">
            <summary>
            Gets whether the bitmap is bottom-up or top-down format.
            </summary>
            <value>
            <c>true</c> if this instance is bottom up image; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetDrawingPixelFormat">
            <summary>
            Gets the System.Drawing pixel format of current structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetDrawingPalette(System.IntPtr)">
            <summary>
            Gets the color palette that's contained in the header.
            Note not all images will have palette, so check if the return value
            is null before using it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.GetStride">
            <summary>
            Gets the stride size of this bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Interop.BITMAPINFOHEADER.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:NTwain.Interop.BITMAPINFOHEADER.CompressionType">
            <summary>
            Indicates the bitmap compression of <seealso cref="T:NTwain.Interop.BITMAPINFOHEADER"/>.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_RGB">
            <summary>
            An uncompressed format.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_RLE8">
            <summary>
             A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. For more information, see Bitmap Compression. 
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_RLE4">
            <summary>
             An RLE, format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two word-length color indexes. For more information, see Bitmap Compression. 
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green, and blue components of each pixel. 
            This is valid when used with 16- and 32-bpp bitmaps. 
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_JPEG">
            <summary>
            Indicates that the image is a JPEG image.
            </summary>
        </member>
        <member name="F:NTwain.Interop.BITMAPINFOHEADER.CompressionType.BI_PNG">
            <summary>
            Indicates that the image is a PNG image.
            </summary>
        </member>
        <member name="T:NTwain.Interop.MESSAGE">
            <summary>
            The MSG structure in Windows for TWAIN use.
            </summary>
        </member>
        <member name="T:NTwain.Interop.TIFFHEADER">
            <summary>
            The TIFF file header.
            </summary>
        </member>
        <member name="T:NTwain.Interop.TIFFTAG">
            <summary>
            An individual TIFF Tag.
            </summary>
        </member>
        <member name="T:NTwain.IPlatformInfo">
            <summary>
            Contains various platform requirements and conditions for TWAIN.
            </summary>
        </member>
        <member name="P:NTwain.IPlatformInfo.DsmExists">
            <summary>
            Gets a value indicating whether the applicable TWAIN DSM library exists in the operating system.
            </summary>
            <value>
              <c>true</c> if the TWAIN DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.ExpectedDsmPath">
            <summary>
            Gets the expected TWAIN DSM dll path.
            </summary>
            <value>
            The expected DSM path.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.IsApp64Bit">
            <summary>
            Gets a value indicating whether the application is running in 64-bit.
            </summary>
            <value>
            <c>true</c> if the application is 64-bit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.IsSupported">
            <summary>
            Gets a value indicating whether this library is supported on current OS.
            Check the other platform properties to determine the reason if this is false.
            </summary>
            <value>
            <c>true</c> if this library is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.UseNewWinDSM">
            <summary>
            Gets a value indicating whether the lib is expecting to use new DSM.
            </summary>
            <value>
              <c>true</c> if using the new DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.PreferNewDSM">
            <summary>
            Gets or sets a value indicating whether to prefer using the new DSM on Windows over old twain_32 dsm if applicable.
            </summary>
            <value>
              <c>true</c> to prefer new DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.IsOnMono">
            <summary>
            Gets a value indicating whether the current runtime is mono.
            </summary>
            <value>
            <c>true</c> if the current runtime is on mono; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.IsWindows">
            <summary>
            Gets a value indicating whether the current OS is windows.
            </summary>
            <value>
            <c>true</c> if the current OS is windows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.IsLinux">
            <summary>
            Gets a value indicating whether the current OS is linux.
            </summary>
            <value>
              <c>true</c> if the current OS is linux; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.MemoryManager">
            <summary>
            Gets the <see cref="T:NTwain.IMemoryManager"/> for communicating with data sources.
            This should only be used when a <see cref="T:NTwain.TwainSession"/> is open.
            </summary>
            <value>
            The memory manager.
            </value>
        </member>
        <member name="P:NTwain.IPlatformInfo.Log">
            <summary>
            Gets or sets the log used by NTwain.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="T:NTwain.ITripletControl">
            <summary>
            Interface for providing TWAIN triplet access.
            </summary>
        </member>
        <member name="P:NTwain.ITripletControl.DGControl">
            <summary>
            Gets the triplet operations defined for control data group.
            </summary>
        </member>
        <member name="P:NTwain.ITripletControl.DGImage">
            <summary>
            Gets the triplet operations defined for image data group.
            </summary>
        </member>
        <member name="P:NTwain.ITripletControl.DGCustom">
            <summary>
            Gets the direct triplet operation entry for custom values.
            </summary>
        </member>
        <member name="T:NTwain.ITwainSession">
            <summary>
            General interface for a TWAIN session.
            </summary>
        </member>
        <member name="P:NTwain.ITwainSession.SynchronizationContext">
            <summary>
            [Experimental] Gets or sets the optional synchronization context when not specifying a <see cref="T:NTwain.MessageLoopHook"/> on <see cref="M:NTwain.ITwainSession.Open"/>.
            This allows events to be raised on the thread associated with the context. This is experimental is not recommended for use.
            </summary>
            <value>
            The synchronization context.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.EnforceState">
            <summary>
            Gets or sets a value indicating whether calls to triplets will verify the current twain session state.
            </summary>
            <value>
              <c>true</c> if state value is enforced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.CurrentSource">
            <summary>
            Gets the currently open source.
            </summary>
            <value>
            The current source.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.DefaultSource">
            <summary>
            Gets or sets the default source for this application.
            While this can be get as long as the session is open,
            it can only be set at State 3.
            </summary>
            <value>
            The default source.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.State">
            <summary>
            Gets the current state number as defined by the TWAIN spec.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:NTwain.ITwainSession.StateEx">
            <summary>
            Gets the named state value as defined by the TWAIN spec.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.IsDsmOpen">
            <summary>
            Quick flag to check if the DSM has been opened.
            </summary>
        </member>
        <member name="P:NTwain.ITwainSession.IsSourceOpen">
            <summary>
            Quick flag to check if a source has been opened.
            </summary>
        </member>
        <member name="P:NTwain.ITwainSession.IsSourceEnabled">
            <summary>
            Quick flag to check if a source has been enabled.
            </summary>
        </member>
        <member name="P:NTwain.ITwainSession.IsTransferring">
            <summary>
            Quick flag to check if a source is in the transferring state.
            </summary>
        </member>
        <member name="P:NTwain.ITwainSession.StopOnTransferError">
            <summary>
            Whether to stop the transfer process when transfer error is encountered.
            May be required on some sources.
            </summary>
            <value>
            <c>true</c> to stop on transfer error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.ITwainSession.DisableReason">
            <summary>
            Gets the reason a source was disabled (dropped from state 5) if it's due to user action.
            Mostly only <see cref="F:NTwain.Data.Message.CloseDSOK"/> or <see cref="F:NTwain.Data.Message.CloseDSReq"/>.
            </summary>
            <value>
            The dialog result.
            </value>
        </member>
        <member name="M:NTwain.ITwainSession.ShowSourceSelector">
            <summary>
            Try to show the built-in source selector dialog and return the selected source.
            This is not recommended and is only included for completeness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.Open">
            <summary>
            Opens the data source manager. This must be the first method used
            before using other TWAIN functions. Calls to this must be followed by 
            <see cref="M:NTwain.ITwainSession.Close" /> when done with a TWAIN session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.Open(NTwain.MessageLoopHook)">
            <summary>
            Opens the data source manager. This must be the first method used
            before using other TWAIN functions. Calls to this must be followed by 
            <see cref="M:NTwain.ITwainSession.Close" /> when done with a TWAIN session.
            </summary>
            <param name="messageLoopHook">The message loop hook.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.Close">
            <summary>
            Closes the data source manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.ForceStepDown(System.Int32)">
            <summary>
            Forces the stepping down of an opened source when things gets out of control.
            Used when session state and source state become out of sync.
            </summary>
            <param name="targetState">State of the target.</param>
        </member>
        <member name="M:NTwain.ITwainSession.GetSources">
            <summary>
            Gets list of sources available in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.OpenSource(System.String)">
            <summary>
            Quick shortcut to open a source.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.OpenSource(System.Int32)">
            <summary>
            Quick shortcut to open a source.
            </summary>
            <param name="sourceId">Id of the source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.GetStatus">
            <summary>
            Gets the manager status. Only call this at state 2 or higher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ITwainSession.GetStatusUtf8(NTwain.Data.TWStatus)">
            <summary>
            Gets the manager status string. Only call this at state 3 or higher.
            </summary>
            <param name="status">Status from previous calls.</param>
            <returns></returns>
        </member>
        <member name="E:NTwain.ITwainSession.StateChanged">
            <summary>
            Occurs when <see cref="P:NTwain.ITwainSession.State"/> has changed.
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.SourceChanged">
            <summary>
            Occurs when <see cref="P:NTwain.ITwainSession.CurrentSource"/> has changed.
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.SourceDisabled">
            <summary>
            Occurs when source has been disabled (back to state 4).
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.DeviceEvent">
            <summary>
            Occurs when the source has generated an event.
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.TransferReady">
            <summary>
            Occurs when a data transfer is ready.
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.DataTransferred">
            <summary>
            Occurs when data has been transferred.
            </summary>
        </member>
        <member name="E:NTwain.ITwainSession.TransferError">
            <summary>
            Occurs when an error has been encountered during transfer.
            </summary>
        </member>
        <member name="T:NTwain.IReadOnlyCapWrapper`1">
            <summary>
            Interface for reading a TWAIN capability associated with a <see cref="T:NTwain.DataSource"/>.
            </summary>
            <typeparam name="TValue">The TWAIN type of the value.</typeparam>    
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGet">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetValues"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGetCurrent">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetDefault"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get default value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGetDefault">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetCurrent"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get current value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGetHelp">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetHelp"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get help; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGetLabel">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetLabel"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get label; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanGetLabelEnum">
            <summary>
            Gets a value indicating whether <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetLabelEnum"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can get label enum; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanReset">
            <summary>
            Gets a value indicating whether <see cref="!:Reset"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can reset; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanSet">
            <summary>
            Gets a value indicating whether <see cref="!:Set"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can set; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.CanSetConstraint">
            <summary>
            Gets a value indicating whether <see cref="!:SetConstraint"/> is supported.
            </summary>
            <value>
              <c>true</c> if this capability can set constraint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.Capability">
            <summary>
            Gets the capability.
            </summary>
            <value>
            The capability.
            </value>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetValuesRaw">
            <summary>
            Gets all the possible values of this capability without expanding.
            This may be required to work with large range values that cannot be safely enumerated
            with <see cref="M:NTwain.IReadOnlyCapWrapper`1.GetValues"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.ConvertValues(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts the object values into typed values using the conversion routine
            for this capability.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetValues">
            <summary>
            Gets all the possible values of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetCurrent">
            <summary>
            Gets the current value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetDefault">
            <summary>
            Gets the default value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetHelp">
            <summary>
            [Experimental] Gets the help value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetLabel">
            <summary>
            [Experimental] Gets the label value of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.IReadOnlyCapWrapper`1.GetLabelEnum">
            <summary>
            [Experimental] Gets the display names for possible values of this capability.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.IsSupported">
            <summary>
            Gets a value indicating whether this capability is at all supported.
            </summary>
            <value>
            <c>true</c> if this capability is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.IReadOnlyCapWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NTwain.ICapWrapper`1">
            <summary>
            Interface for reading/writing a TWAIN capability associated with a <see cref="T:NTwain.DataSource"/>.
            </summary>
            <typeparam name="TValue">The TWAIN type of the value.</typeparam>
        </member>
        <member name="M:NTwain.ICapWrapper`1.Reset">
            <summary>
            Resets the current value to power-on default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetValue(`0)">
            <summary>
            Simplified version that sets the current value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetValue(NTwain.Data.TWArray)">
            <summary>
            A version of Set that uses an array.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetValue(NTwain.Data.TWEnumeration)">
            <summary>
            A version of Set that uses an enumeration.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetConstraint(NTwain.Data.TWOneValue)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetConstraint(NTwain.Data.TWEnumeration)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.ICapWrapper`1.SetConstraint(NTwain.Data.TWRange)">
            <summary>
            Sets the constraint value of this capability.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.MessageLoopHook">
            <summary>
            An abstract class for TWAIN to hook into windows message loops.
            </summary>
        </member>
        <member name="M:NTwain.MessageLoopHook.BeginInvoke(System.Action)">
            <summary>
            Asynchronously invokes the specified action on the message loop thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:NTwain.MessageLoopHook.Invoke(System.Action)">
            <summary>
            Synchronously invokes the specified action on the message loop thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:NTwain.MessageLoopHook.Rethrow(System.Exception)">
            <summary>
            Rethrows the specified excetion while keeping stack trace.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:NTwain.WindowsFormsMessageLoopHook">
            <summary>
            A <see cref="T:NTwain.MessageLoopHook"/> for use in winform applications.
            </summary>
        </member>
        <member name="M:NTwain.WindowsFormsMessageLoopHook.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.WindowsFormsMessageLoopHook"/> class.
            </summary>
            <param name="windowHandle">The handle to the app window.</param>
            <exception cref="T:System.ArgumentException">A valid window handle is required.</exception>
        </member>
        <member name="T:NTwain.WpfMessageLoopHook">
            <summary>
            A <see cref="T:NTwain.MessageLoopHook"/> for use in WPF applications.
            </summary>
        </member>
        <member name="M:NTwain.WpfMessageLoopHook.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.WpfMessageLoopHook"/> class.
            </summary>
            <param name="windowHandle">The handle to the app window.</param>
            <exception cref="T:System.ArgumentException">A valid window handle is required.</exception>
        </member>
        <member name="T:NTwain.PlatformInfo">
            <summary>
            Contains various platform requirements and conditions for TWAIN.
            </summary>
        </member>
        <member name="P:NTwain.PlatformInfo.Current">
            <summary>
            Gets the current platform info related to TWAIN.
            </summary>
            <value>
            The current info.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.PreferNewDSM">
            <summary>
            Gets a value indicating whether to prefer using the new DSM on Windows over old twain_32 dsm if applicable.
            </summary>
            <value>
              <c>true</c> to prefer new DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.UseNewWinDSM">
            <summary>
            Gets a value indicating whether the lib is expecting to use new DSM.
            </summary>
            <value>
              <c>true</c> if using the new DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.IsOnMono">
            <summary>
            Gets a value indicating whether the current runtime is mono.
            </summary>
            <value>
            <c>true</c> if the current runtime is on mono; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.IsWindows">
            <summary>
            Gets a value indicating whether the current OS is windows.
            </summary>
            <value>
            <c>true</c> if the current OS is windows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.IsLinux">
            <summary>
            Gets a value indicating whether the current OS is linux.
            </summary>
            <value>
              <c>true</c> if the current OS is linux; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.IsApp64Bit">
            <summary>
            Gets a value indicating whether the application is running in 64-bit.
            </summary>
            <value>
            <c>true</c> if the application is 64-bit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.DsmExists">
            <summary>
            Gets a value indicating whether the applicable TWAIN DSM library exists in the operating system.
            </summary>
            <value>
              <c>true</c> if the TWAIN DSM; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.ExpectedDsmPath">
            <summary>
            Gets the expected TWAIN DSM dll path.
            </summary>
            <value>
            The expected DSM path.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.IsSupported">
            <summary>
            Gets a value indicating whether this library is supported on current OS.
            Check the other platform properties to determine the reason if this is false.
            </summary>
            <value>
            <c>true</c> if this library is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.MemoryManager">
            <summary>
            Gets the <see cref="T:NTwain.IMemoryManager"/> for communicating with data sources.
            This should only be used when a <see cref="T:NTwain.TwainSession"/> is open.
            </summary>
            <value>
            The memory manager.
            </value>
        </member>
        <member name="P:NTwain.PlatformInfo.Log">
            <summary>
            Gets or sets the log used by NTwain.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="T:NTwain.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.BadDataGroupsForAppId">
            <summary>
              Looks up a localized string similar to Data group for application must contain either Image or Audio..
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.BadValueType">
            <summary>
              Looks up a localized string similar to Invalid value type for {0}..
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.CapHasBadContainer">
            <summary>
              Looks up a localized string similar to Capability {0} has invalid container type {1}..
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.MaxStringLengthExceeded">
            <summary>
              Looks up a localized string similar to The string value has exceeded the maximum length allowed..
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.MsgLoopUnavailble">
            <summary>
              Looks up a localized string similar to Message loop has not started yet..
            </summary>
        </member>
        <member name="P:NTwain.Properties.Resources.SourceRequired">
            <summary>
              Looks up a localized string similar to Source name is required..
            </summary>
        </member>
        <member name="T:NTwain.VersionInfo">
            <summary>
            Contains version info of NTwain.
            </summary>
        </member>
        <member name="F:NTwain.VersionInfo.Release">
            <summary>
            The major release version number.
            </summary>
        </member>
        <member name="F:NTwain.VersionInfo.Build">
            <summary>
            The build release version number.
            </summary>
        </member>
        <member name="T:NTwain.ProtocolVersions">
            <summary>
            Contains the minimum TWAIN protocol version for various things.
            </summary>
        </member>
        <member name="M:NTwain.ProtocolVersions.GetMinimumVersion(NTwain.Data.CapabilityId)">
            <summary>
            Gets the minimum TWAIN protocol version for a capability.
            </summary>
            <param name="id">The capability type.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.State">
            <summary>
            The logical state of a TWAIN session.
            </summary>
        </member>
        <member name="F:NTwain.State.Invalid">
            <summary>
            Just a default value.
            </summary>
        </member>
        <member name="F:NTwain.State.DsmUnloaded">
            <summary>
            The starting state, corresponds to state 1.
            </summary>
        </member>
        <member name="F:NTwain.State.DsmLoaded">
            <summary>
            The DSM library has been loaded, corresponds to state 2.
            </summary>
        </member>
        <member name="F:NTwain.State.DsmOpened">
            <summary>
            The DSM has been opened, corresponds to state 3.
            </summary>
        </member>
        <member name="F:NTwain.State.SourceOpened">
            <summary>
            A data source has been opened, corresponds to state 4.
            </summary>
        </member>
        <member name="F:NTwain.State.SourceEnabled">
            <summary>
            A data source has been enabled, corresponds to state 5.
            </summary>
        </member>
        <member name="F:NTwain.State.TransferReady">
            <summary>
            Data is ready for transfer from the source, corresponds to state 6.
            </summary>
        </member>
        <member name="F:NTwain.State.Transferring">
            <summary>
            Data is being transferred, corresponds to state 7.
            </summary>
        </member>
        <member name="T:NTwain.TransferErrorEventArgs">
            <summary>
            Contains TWAIN codes and source status when an error is encountered during transfer.
            </summary>
        </member>
        <member name="M:NTwain.TransferErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TransferErrorEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:NTwain.TransferErrorEventArgs.#ctor(NTwain.Data.ReturnCode,NTwain.Data.TWStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TransferErrorEventArgs"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:NTwain.TransferErrorEventArgs.ReturnCode">
            <summary>
            Gets the return code from the transfer.
            </summary>
            <value>
            The return code.
            </value>
        </member>
        <member name="P:NTwain.TransferErrorEventArgs.SourceStatus">
            <summary>
            Gets the source status.
            </summary>
            <value>
            The source status.
            </value>
        </member>
        <member name="P:NTwain.TransferErrorEventArgs.Exception">
            <summary>
            Gets the exception if the error is from some exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:NTwain.TransferReadyEventArgs">
            <summary>
            Contains event data when a data transfer is ready to be processed.
            </summary>
        </member>
        <member name="M:NTwain.TransferReadyEventArgs.#ctor(NTwain.DataSource,System.Int32,NTwain.Data.EndXferJob)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TransferReadyEventArgs"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="pendingCount">The pending count.</param>
            <param name="endOfJobFlag"></param>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>
            The data source.
            </value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.CancelCurrent">
            <summary>
            Gets or sets a value indicating whether the current transfer should be canceled
            and continue next transfer if there are more data.
            </summary>
            <value><c>true</c> to cancel current transfer; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.CancelAll">
            <summary>
            Gets or sets a value indicating whether all transfers should be canceled.
            </summary>
            <value><c>true</c> to cancel all transfers; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.EndOfJob">
            <summary>
            Gets a value indicating whether current transfer signifies an end of job in TWAIN world.
            </summary>
            <value><c>true</c> if transfer is end of job; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.EndOfJobFlag">
            <summary>
            Gets the end of job flag value for this transfer (if job control is enabled).
            </summary>
            <value>
            The end of job flag.
            </value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.PendingTransferCount">
            <summary>
            Gets the known pending transfer count. This may not be appilicable 
            for certain scanning modes.
            </summary>
            <value>The pending count.</value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.PendingImageInfo">
            <summary>
            Gets the tentative image information for the current transfer if applicable.
            This may differ from the final image depending on the transfer mode used (mostly when doing mem xfer).
            </summary>
            <value>
            The image info.
            </value>
        </member>
        <member name="P:NTwain.TransferReadyEventArgs.AudioInfo">
            <summary>
            Gets the audio information for the current transfer if applicable.
            </summary>
            <value>
            The audio information.
            </value>
        </member>
        <member name="M:NTwain.Triplets.Callback2.RegisterCallback(NTwain.Data.TWCallback2)">
            <summary>
            This triplet is sent to the DSM by the Application to register the application’s entry point with
            the DSM, so that the DSM can use callbacks to inform the application of events generated by the
            DS.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.CapabilityCustom">
            <summary>
            This is to support custom DAT value for custom capability defined by some manufacturers.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.Get(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Current, Default and Available Values for a specified capability.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.GetCurrent(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Current Value for the specified capability.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.GetDefault(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Default Value. This is the Source’s preferred default value.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.GetHelp(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns help text suitable for use in a GUI; for instance: "Specify the amount of detail in an
            image. Higher values result in more detail." for ICapXRESOLUTION.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.GetLabel(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns a label suitable for use in a GUI, for instance "Resolution:"
            for ICapXRESOLUTION.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.GetLabelEnum(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Return all of the labels for a capability of type <see cref="T:NTwain.Data.TWArray"/> or <see cref="T:NTwain.Data.TWEnumeration"/>, for example
            "US Letter" for ICapSupportedSizes’ TWSS_USLETTER.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.QuerySupport(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s support status of this capability.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.Reset(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Change the Current Value of the specified capability back to its power-on value and return the
            new Current Value.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.ResetAll(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            This command resets all of the current values and constraints to their defaults for all of the
            negotiable capabilities supported by the driver.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.Set(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Changes the Current Value(s) and Available Values of the specified capability to those specified
            by the application. As of TWAIN 2.2 this only modifies the Current Value of the specified capability, constraints cannot be
            changed with this.
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWOneValue"/> or <see cref="T:NTwain.Data.TWArray"/>. Available and
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWEnumeration"/> or <see cref="T:NTwain.Data.TWRange"/>.
            </summary>
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CapabilityCustom.SetConstraint(System.UInt16,NTwain.Data.TWCapability)">
            <summary>
            Changes the Current Value(s) and Available Value(s) of the specified capability to those specified
            by the application.
            </summary>
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWOneValue"/> or <see cref="T:NTwain.Data.TWArray"/>. Available and
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWEnumeration"/> or <see cref="T:NTwain.Data.TWRange"/>.
            <param name="customDAT">The custom DAT_* value from manufacturer.</param>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Filter">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Filter"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Filter.Get(NTwain.Data.TWFilter@)">
            <summary>
            Causes the Source to return the filter parameters that will be used during the next image
            acquisition.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Filter.GetDefault(NTwain.Data.TWFilter@)">
            <summary>
            Causes the Source to return the power-on default values applied to the filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Filter.Set(NTwain.Data.TWFilter)">
            <summary>
            Allows the Application to configure the filter parameters that will be used during the next image
            acquisition.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Filter.Reset(NTwain.Data.TWFilter@)">
            <summary>
            Return the Source to using its power-on default values when it is applying the filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.DGCustom">
            <summary>
            Provides direct access to the triplet call.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.DGCustom.DsmEntry(NTwain.Data.DataGroups,NTwain.Data.DataArgumentType,NTwain.Data.Message,System.IntPtr@)">
            <summary>
            Direct DSM_Entry call with full arguments for custom values.
            </summary>
            <param name="group">The group.</param>
            <param name="dat">The dat.</param>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.DGCustom.DsmEntry(NTwain.Data.DataGroups,NTwain.Data.DataArgumentType,NTwain.Data.Message,System.IntPtr)">
            <summary>
            Direct DSM_Entry call with full arguments for custom values.
            </summary>
            <param name="group">The group.</param>
            <param name="dat">The dat.</param>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.TripletBase">
            <summary>
            Base class for grouping triplet operations messages.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.TripletBase.#ctor(NTwain.Internals.ITwainSessionInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Triplets.TripletBase" /> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:NTwain.Triplets.TripletBase.Session">
            <summary>
            Gets the twain session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="T:NTwain.Triplets.Dsm">
            <summary>
            Contains the full TWAIN entry signatures through pinvoke.
            These are called by all the defined triplets methods in 
            this namespace.
            </summary>
        </member>
        <member name="T:NTwain.Triplets.AudioFileXfer">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.AudioFileXfer"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.AudioFileXfer.Get">
            <summary>
            This operation is used to initiate the transfer of audio from the Source to the application via the
            disk-file transfer mechanism. It causes the transfer to begin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.AudioInfo">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.AudioInfo"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.AudioInfo.Get(NTwain.Data.TWAudioInfo@)">
            <summary>
            Used to get the information of the current audio data ready to transfer.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.AudioNativeXfer">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.AudioNativeXfer"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.AudioNativeXfer.Get(System.IntPtr@)">
            <summary>
            Causes the transfer of an audio data from the Source to the application, via the Native
            transfer mechanism, to begin. The resulting data is stored in main memory in a single block.
            The data is stored in AIFF format on the Macintosh and as a WAV format under Microsoft
            Windows. The size of the audio snippet that can be transferred is limited to the size of the
            memory block that can be allocated by the Source.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.DGAudio">
            <summary>
            Represents <see cref="F:NTwain.Data.DataGroups.Audio"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Callback.RegisterCallback(NTwain.Data.TWCallback)">
            <summary>
            This triplet is sent to the DSM by the Application to register the application’s entry point with
            the DSM, so that the DSM can use callbacks to inform the application of events generated by the
            DS.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Capability">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Capability"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Capability.Get(NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Current, Default and Available Values for a specified capability.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.GetCurrent(NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Current Value for the specified capability.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.GetDefault(NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s Default Value. This is the Source’s preferred default value.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.GetHelp(NTwain.Data.TWCapability)">
            <summary>
            Returns help text suitable for use in a GUI; for instance: "Specify the amount of detail in an
            image. Higher values result in more detail." for ICapXRESOLUTION.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.GetLabel(NTwain.Data.TWCapability)">
            <summary>
            Returns a label suitable for use in a GUI, for instance "Resolution:"
            for ICapXRESOLUTION.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.GetLabelEnum(NTwain.Data.TWCapability)">
            <summary>
            Return all of the labels for a capability of type <see cref="T:NTwain.Data.TWArray"/> or <see cref="T:NTwain.Data.TWEnumeration"/>, for example
            "US Letter" for ICapSupportedSizes’ TWSS_USLETTER.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.QuerySupport(NTwain.Data.TWCapability)">
            <summary>
            Returns the Source’s support status of this capability.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.Reset(NTwain.Data.TWCapability)">
            <summary>
            Change the Current Value of the specified capability back to its power-on value and return the
            new Current Value.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.ResetAll(NTwain.Data.TWCapability)">
            <summary>
            This command resets all of the current values and constraints to their defaults for all of the
            negotiable capabilities supported by the driver.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.Set(NTwain.Data.TWCapability)">
            <summary>
            Changes the Current Value(s) and Available Values of the specified capability to those specified
            by the application. As of TWAIN 2.2 this only modifies the Current Value of the specified capability, constraints cannot be
            changed with this.
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWOneValue"/> or <see cref="T:NTwain.Data.TWArray"/>. Available and
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWEnumeration"/> or <see cref="T:NTwain.Data.TWRange"/>.
            </summary>
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Capability.SetConstraint(NTwain.Data.TWCapability)">
            <summary>
            Changes the Current Value(s) and Available Value(s) of the specified capability to those specified
            by the application.
            </summary>
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWOneValue"/> or <see cref="T:NTwain.Data.TWArray"/>. Available and
            Current Values are set when the container is a <see cref="T:NTwain.Data.TWEnumeration"/> or <see cref="T:NTwain.Data.TWRange"/>.
            <param name="capability">The capability.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.DGControl">
            <summary>
            Represents <see cref="F:NTwain.Data.DataGroups.Control"/>.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.Capability">
            <summary>
            Gets the operations defined for DAT_CAPABILITY.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.CapabilityCustom">
            <summary>
            Gets the operations defined for a custom DAT_* value with capability data.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.FileSystem">
            <summary>
            Gets the operations defined for DAT_FILESYSTEM.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.PassThru">
            <summary>
            Gets the operations defined for DAT_PASSTHRU.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.SetupFileXfer">
            <summary>
            Gets the operations defined for DAT_SETUPFILEXFER.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.SetupMemXfer">
            <summary>
            Gets the operations defined for DAT_SETUPMEMXFER.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGControl.XferGroup">
            <summary>
            Gets the operations defined for DAT_XFERGROUP.
            </summary>
        </member>
        <member name="T:NTwain.Triplets.CustomDSData">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.CustomDSData"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.CustomDSData.Get(NTwain.Data.TWCustomDSData@)">
            <summary>
            This operation is used by the application to query the data source for its current settings, e.g.
            DPI, paper size, color format. The actual format of the data is data source dependent and not
            defined by TWAIN.
            </summary>
            <param name="customData">The custom data.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.CustomDSData.Set(NTwain.Data.TWCustomDSData)">
            <summary>
            This operation is used by the application to set the current settings for a data source to a
            previous state as defined by the data contained in the customData data structure. The actual
            format of the data is data source dependent and not defined by TWAIN.
            </summary>
            <param name="customData">The custom data.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.DeviceEvent">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.DeviceEvent"/>.
            </summary>
        </member>
        <member name="T:NTwain.Triplets.EntryPoint">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.EntryPoint"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.EntryPoint.Get(NTwain.Data.TWEntryPoint@)">
            <summary>
            Gets the function entry points for twain 2.0 or higher.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Event.ProcessEvent(NTwain.Data.TWEvent)">
            <summary>
            This operation supports the distribution of events from the application to Sources so that the
            Source can maintain its user interface and return messages to the application. Once the
            application has enabled the Source, it must immediately begin sending to the Source all events
            that enter the application’s main event loop. This allows the Source to update its user interface
            in real-time and to return messages to the application which cause state transitions. Even if the
            application overrides the Source’s user interface, it must forward all events once the Source has
            been enabled. The Source will tell the application whether or not each event belongs to the
            Source.
            </summary>
            <param name="theEvent">The event.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.FileSystem">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.FileSystem"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.AutomaticCaptureDirectory(NTwain.Data.TWFileSystem)">
            <summary>
            This operation selects the destination directory within the Source (camera, storage, etc), where
            images captured using CapAutomaticCapture will be stored. This command only selects
            the destination directory (a file of type Directory). The directory must exist and be
            accessible to the Source. The creation of images within the directory is at the discretion of the
            Source, and may result in the creation of additional sub-directories.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.ChangeDirectory(NTwain.Data.TWFileSystem)">
            <summary>
            This operation selects the current device within the Source (camera, storage, etc). If the device is
            a <see cref="F:NTwain.Data.FileType.Domain"/>, then this command enters a directory that can contain <see cref="F:NTwain.Data.FileType.Host"/> files. If the
            device is a <see cref="F:NTwain.Data.FileType.Host"/>, then this command enters a directory that can contain
            <see cref="F:NTwain.Data.FileType.Directory"/> files. If the device is a <see cref="F:NTwain.Data.FileType.Directory"/>, then this command enters a
            directory that can contain <see cref="F:NTwain.Data.FileType.Directory"/> or <see cref="F:NTwain.Data.FileType.Image"/> files.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.Copy(NTwain.Data.TWFileSystem)">
            <summary>
            This operation copies a file or directory. Absolute and relative pathnames are supported. A file
            may not be overwritten with this command. If an Application wishes to do this, it must first
            delete the unwanted file and then reissue the Copy command.
            The Application specifies the path and name of the entry to be copied in InputName. The
            Application specifies the new patch and name in OutputName.
            It is not permitted to copy files into the root directory.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.CreateDirectory(NTwain.Data.TWFileSystem)">
            <summary>
            This operation creates a new directory within the current directory. Pathnames are not allowed,
            only the name of the new directory can be specified.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.Delete(NTwain.Data.TWFileSystem)">
            <summary>
            This operation deletes a file or directory on the device. Pathnames are not allowed, only the
            name of the file or directory to be deleted can be specified. Recursive deletion can be specified
            by setting the Recursive to TRUE.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.FormatMedia(NTwain.Data.TWFileSystem)">
            <summary>
            This operation formats the specified storage. This operation destroys all images and subdirectories
            under the selected device. Use with caution.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.GetClose(NTwain.Data.TWFileSystem)">
            <summary>
            The operation frees the Context field in fileSystem.
            Every call to GetFirstFile must be matched by
            a call to GetClose to release the Context field.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.GetFirstFile(NTwain.Data.TWFileSystem)">
            <summary>
            This operation gets the first filename in a directory, and returns information about that file (the
            same information that can be retrieved with GetInfo).
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.GetInfo(NTwain.Data.TWFileSystem)">
            <summary>
            This operation fills the information fields in fileSystem.
            InputName contains the absolute or relative path and filename of the requested file.
            OutputName returns the absolute path to the file.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.GetNextFile(NTwain.Data.TWFileSystem)">
            <summary>
            This operation gets the next filename in a directory, and returns information about that file (the
            same information that can be retrieved with GetInfo).
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.FileSystem.Rename(NTwain.Data.TWFileSystem)">
            <summary>
            This operation renames (and optionally moves) a file or directory. Absolute and relative path
            names are supported. A file may not be overwritten with this command. If an Application
            wishes to do this it must first delete the unwanted file, then issue the rename command.
            The Application specifies the path and name of the entry to be renamed in InputName. The
            Application specifies the new path and name in OutputName.
            Filenames in the root directory cannot be moved or renamed.
            </summary>
            <param name="fileSystem">The file system.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Identity">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Identity"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Identity.CloseDS">
            <summary>
            When an application is finished with a Source, it must formally close the session between them
            using this operation. This is necessary in case the Source only supports connection with a single
            application (many desktop scanners will behave this way). A Source such as this cannot be
            accessed by other applications until its current session is terminated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.GetDefault(NTwain.Data.TWIdentity@)">
            <summary>
            Gets the identification information of the system default Source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.GetFirst(NTwain.Data.TWIdentity@)">
            <summary>
            The application may obtain the first Source that are currently available on the system which
            match the application’s supported groups.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.GetNext(NTwain.Data.TWIdentity@)">
            <summary>
            The application may obtain the next Source that are currently available on the system which
            match the application’s supported groups.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.OpenDS(NTwain.DataSource)">
            <summary>
            Loads the specified Source into main memory and causes its initialization.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.Set(NTwain.Data.TWIdentity)">
            <summary>
            It allows an application to set the
            default TWAIN driver, which is reported back by GetDefault.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Identity.UserSelect(NTwain.Data.TWIdentity@)">
            <summary>
            This operation should be invoked when the user chooses Select Source... from the application’s
            File menu (or an equivalent user action). The Source selected becomes the system default Source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Parent">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Parent"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Parent.CloseDsm(System.IntPtr)">
            <summary>
            When the application has closed all the Sources it had previously opened, and is finished with
            the Source Manager (the application plans to initiate no other TWAIN sessions), it must close
            the Source Manager.
            </summary>
            <param name="handle">The handle. On Windows = points to the window handle (hWnd) that will act as the Source’s
            "parent". On Macintosh = should be a NULL value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Parent.OpenDsm(System.IntPtr)">
            <summary>
            Causes the Source Manager to initialize itself. This operation must be executed before any other
            operations will be accepted by the Source Manager.
            </summary>
            <param name="handle">The handle. On Windows = points to the window handle (hWnd) that will act as the Source’s
            "parent". On Macintosh = should be a NULL value.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.PassThru">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.PassThru"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.PassThru.PassThrough(NTwain.Data.TWPassThru)">
            <summary>
            PASSTHRU is intended for the use of Source writers writing diagnostic applications. It allows
            raw communication with the currently selected device in the Source.
            </summary>
            <param name="sourcePassThru">The source pass thru.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.PendingXfers">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.PendingXfers"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.PendingXfers.EndXfer(NTwain.Data.TWPendingXfers)">
            <summary>
            This triplet is used to cancel or terminate a transfer. Issued in state 6, this triplet cancels the next
            pending transfer, discards the transfer data, and decrements the pending transfers count. In
            state 7, this triplet terminates the current transfer. If any data has not been transferred (this is
            only possible during a memory transfer) that data is discarded.
            </summary>
            <param name="pendingXfers">The pending xfers.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.PendingXfers.Get(NTwain.Data.TWPendingXfers)">
            <summary>
            Returns the number of transfers the Source is ready to supply to the application, upon demand.
            If DAT_XFERGROUP is set to DG_Image, this is the number of images. If DAT_XFERGROUP is set
            to DG_AUDIO, this is the number of audio snippets for the current image. If there is no current
            image, this call must return Failure / SeqError.
            </summary>
            <param name="pendingXfers">The pending xfers.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.PendingXfers.Reset(NTwain.Data.TWPendingXfers)">
            <summary>
            Sets the number of pending transfers in the Source to zero.
            </summary>
            <param name="pendingXfers">The pending xfers.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.PendingXfers.StopFeeder(NTwain.Data.TWPendingXfers)">
            <summary>
            If CapAutoScan is TRUE, this command will stop the operation of the scanner’s automatic
            feeder. No other action is taken.
            </summary>
            <param name="pendingXfers">The pending xfers.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.SetupFileXfer">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.SetupFileXfer"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.SetupFileXfer.Get(NTwain.Data.TWSetupFileXfer@)">
            <summary>
            Returns information about the file into which the Source has or will put the acquired image
            or audio data.
            </summary>
            <param name="setupFileXfer">The setup file xfer.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.SetupFileXfer.GetDefault(NTwain.Data.TWSetupFileXfer@)">
            <summary>
            Returns information for the default image or audio file.
            </summary>
            <param name="setupFileXfer">The setup file xfer.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.SetupFileXfer.Reset(NTwain.Data.TWSetupFileXfer@)">
            <summary>
            Resets the current file information to the image or audio default file information and
            returns that default information.
            </summary>
            <param name="setupFileXfer">The setup file xfer.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.SetupFileXfer.Set(NTwain.Data.TWSetupFileXfer)">
            <summary>
            Sets the file transfer information for the next file transfer. The application is responsible for
            verifying that the specified file name is valid and that the file either does not currently exist (in
            which case, the Source is to create the file), or that the existing file is available for opening and
            read/write operations. The application should also assure that the file format it is requesting
            can be provided by the Source
            </summary>
            <param name="setupFileXfer">The setup file xfer.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.SetupMemXfer">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.SetupMemXfer"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.SetupMemXfer.Get(NTwain.Data.TWSetupMemXfer@)">
            <summary>
            Returns the Source’s preferred, minimum, and maximum allocation sizes for transfer memory
            buffers.
            </summary>
            <param name="setupMemXfer">The setup mem xfer.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Status">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Status"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Status.GetManager(NTwain.Data.TWStatus@)">
            <summary>
            Returns the current Condition Code for the Source Manager.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Status.GetSource(NTwain.Data.TWStatus@)">
            <summary>
            Returns the current Condition Code for the specified Source.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.StatusUtf8">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.StatusUtf8"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.StatusUtf8.GetManager(NTwain.Data.TWStatus,NTwain.Data.TWStatusUtf8@)">
            <summary>
            Translate the contents of a TW_STATUS structure received from the manager into a localized UTF-8
            encoded string.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.StatusUtf8.GetSource(NTwain.Data.TWStatus,NTwain.Data.TWStatusUtf8@)">
            <summary>
            Translate the contents of a TW_STATUS structure received from a Source into a localized UTF-8
            encoded string.
            </summary>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.UserInterface">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.UserInterface"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.UserInterface.DisableDS(NTwain.Data.TWUserInterface)">
            <summary>
            This operation causes the Source’s user interface, if displayed during the
            EnableDS operation, to be lowered. The Source is returned to
            State 4, where capability negotiation can again occur. The application can invoke this operation
            either because it wants to shut down the current session, or in response to the Source "posting"
            a CloseDSReq event to it. Rarely, the application may need to close the Source because an
            error condition was detected.
            </summary>
            <param name="userInterface">The user interface.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.UserInterface.EnableDS(NTwain.Data.TWUserInterface)">
            <summary>
            Enables the DS.
            </summary>
            <param name="userInterface">The user interface.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.UserInterface.EnableDSUIOnly(NTwain.Data.TWUserInterface)">
            <summary>
            This operation is used by applications
            that wish to display the source user interface to allow the user to manipulate the sources current
            settings for DPI, paper size, etc. but not acquire an image.
            </summary>
            <param name="userInterface">The user interface.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.XferGroup">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.XferGroup"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.XferGroup.Get(NTwain.Data.DataGroups@)">
            <summary>
            Returns the Data Group (the type of data) for the upcoming transfer. The Source is required to
            only supply one of the DGs specified in the SupportedGroups field of origin.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.XferGroup.Set(NTwain.Data.DataGroups)">
            <summary>
            The transfer group determines the kind of data being passed from the Source to the Application.
            By default a TWAIN Source must default to DG_IMAGE. Currently the only other data group
            supported is DG_AUDIO, which is a feature supported by some digital cameras.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.CieColor">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.CieColor"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.CieColor.Get(NTwain.Data.TWCieColor@)">
            <summary>
            This operation causes the Source to report the currently active parameters to be used in
            converting acquired color data into CIE XYZ.
            </summary>
            <param name="cieColor">Color data.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.DGImage">
            <summary>
            Represents <see cref="F:NTwain.Data.DataGroups.Image"/>.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.CieColor">
            <summary>
            Gets the operations defined for DAT_CIECOLOR.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.ExtImageInfo">
            <summary>
            Gets the operations defined for DAT_EXTIMAGEINFO.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.Filter">
            <summary>
            Gets the operations defined for DAT_FILTER.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.GrayResponse">
            <summary>
            Gets the operations defined for DAT_GRAYRESPONSE.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.IccProfile">
            <summary>
            Gets the operations defined for DAT_ICCPROFILE.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.ImageLayout">
            <summary>
            Gets the operations defined for DAT_IMAGELAYOUT.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.JpegCompression">
            <summary>
            Gets the operations defined for DAT_JPEGCOMPRESSION.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.Palette8">
            <summary>
            Gets the operations defined for DAT_PALETTE8.
            </summary>
        </member>
        <member name="P:NTwain.Triplets.DGImage.RgbResponse">
            <summary>
            Gets the operations defined for DAT_RGBRESPONSE.
            </summary>
        </member>
        <member name="T:NTwain.Triplets.ExtImageInfo">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.ExtImageInfo"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.ExtImageInfo.Get(NTwain.Data.TWExtImageInfo)">
            <summary>
            This operation is used by the application to query the data source for extended image attributes.
            The application is responsible for creating and disiposing the info object.
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.GrayResponse">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.GrayResponse"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.GrayResponse.Reset(NTwain.Data.TWGrayResponse@)">
            <summary>
            The Reset operation causes the Source to use its "identity response curve." The identity
            curve causes no change in the values of the captured data when it is applied.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.GrayResponse.Set(NTwain.Data.TWGrayResponse)">
            <summary>
            This operation causes the Source to transform any grayscale data according to the response
            curve specified.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.IccProfile">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.IccProfile"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.IccProfile.Get(NTwain.Data.TWMemory@)">
            <summary>
            This operation provides the application with the ICC profile associated with the image which is
            about to be transferred (state 6) or is being transferred (state 7).
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.ImageFileXfer">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.ImageFileXfer"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.ImageFileXfer.Get">
            <summary>
            This operation is used to initiate the transfer of an image from the Source to the application via
            the disk-file transfer mechanism. It causes the transfer to begin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.ImageInfo">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.ImageInfo"/>.
            </summary>
        </member>
        <member name="T:NTwain.Triplets.ImageLayout">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.ImageLayout"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.ImageLayout.Get(NTwain.Data.TWImageLayout@)">
            <summary>
            Gets both the size and placement of the image on the scanner. The
            coordinates on the scanner and the extents of the image are expressed in the unit of measure
            currently negotiated for ICAP_UNITS (default is inches).
            </summary>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageLayout.GetDefault(NTwain.Data.TWImageLayout@)">
            <summary>
            returns the default information on the layout of an image. This is the size and
            position of the image that will be acquired from the Source if the acquisition is started with the
            Source (and the device it is controlling) in its power-on state (for instance, most flatbed scanners
            will capture the entire bed).
            </summary>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageLayout.Reset(NTwain.Data.TWImageLayout@)">
            <summary>
            This operation sets the image layout information for the next transfer to its default settings.
            </summary>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageLayout.Set(NTwain.Data.TWImageLayout)">
            <summary>
            This operation sets the layout for the next image transfer. This allows the application to specify
            the physical area to be acquired during the next image transfer (for instance, a frame-based
            application would pass to the Source the size of the frame the user selected within the
            application—the helpful Source would present a selection region already sized to match the
            layout frame size).
            </summary>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageMemFileXfer.Get(NTwain.Data.TWImageMemXfer)">
            <summary>
            This operation is used to initiate the transfer of an image from the Source to the application via
            the Memory-File transfer mechanism.
            </summary>
            <param name="xfer">The xfer.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageMemXfer.Get(NTwain.Data.TWImageMemXfer)">
            <summary>
            This operation is used to initiate the transfer of an image from the Source to the application via
            the Buffered Memory transfer mechanism.
            </summary>
            <param name="xfer">The xfer.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.ImageNativeXfer.Get(System.IntPtr@)">
            <summary>
            Causes the transfer of an image’s data from the Source to the application, via the Native transfer
            mechanism, to begin. The resulting data is stored in main memory in a single block. The data is
            stored in Picture (PICT) format on the Macintosh and as a device-independent bitmap (DIB)
            under Microsoft Windows. The size of the image that can be transferred is limited to the size of
            the memory block that can be allocated by the Source.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.JpegCompression">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.JpegCompression"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.JpegCompression.Get(NTwain.Data.TWJpegCompression@)">
            <summary>
            Causes the Source to return the parameters that will be used during the compression of data
            using the JPEG algorithms.
            </summary>
            <param name="compression">The compression.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.JpegCompression.GetDefault(NTwain.Data.TWJpegCompression@)">
            <summary>
            Causes the Source to return the power-on default values applied to JPEG-compressed data
            transfers.
            </summary>
            <param name="compression">The compression.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.JpegCompression.Reset(NTwain.Data.TWJpegCompression@)">
            <summary>
            Return the Source to using its power-on default values for JPEG-compressed transfers.
            </summary>
            <param name="compression">The compression.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.JpegCompression.Set(NTwain.Data.TWJpegCompression)">
            <summary>
            Allows the application to configure the compression parameters to be used on all future JPEGcompressed
            transfers during the current session. The application should have already
            established that the requested values are supported by the Source.
            </summary>
            <param name="compression">The compression.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.Palette8">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.Palette8"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.Palette8.Get(NTwain.Data.TWPalette8@)">
            <summary>
            This operation causes the Source to report its current palette information.
            </summary>
            <param name="palette">The palette.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Palette8.GetDefault(NTwain.Data.TWPalette8@)">
            <summary>
            This operation causes the Source to report its power-on default palette.
            </summary>
            <param name="palette">The palette.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Palette8.Reset(NTwain.Data.TWPalette8@)">
            <summary>
            This operation causes the Source to dispose of any current palette it has and to use its default
            palette for the next palette transfer.
            </summary>
            <param name="palette">The palette.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.Palette8.Set(NTwain.Data.TWPalette8)">
            <summary>
            This operation requests that the Source adopt the specified palette for use with all subsequent
            palette transfers. The application should be careful to supply a palette that matches the bit
            depth of the Source. The Source is not required to adopt this palette. The application should be
            careful to check the return value from this operation.
            </summary>
            <param name="palette">The palette.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.Triplets.RgbResponse">
            <summary>
            Represents <see cref="F:NTwain.Data.DataArgumentType.RgbResponse"/>.
            </summary>
        </member>
        <member name="M:NTwain.Triplets.RgbResponse.Reset(NTwain.Data.TWRgbResponse@)">
            <summary>
            Causes the Source to use its "identity" response curves for future RGB transfers. The identity
            curve causes no change in the values of the captured data when it is applied. (Note that
            resetting the curves for RGB data does not reset any curves for other pixel types).
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Triplets.RgbResponse.Set(NTwain.Data.TWRgbResponse)">
            <summary>
            Causes the Source to transform any RGB data according to the response curves specified by the
            application.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:NTwain.TwainSession">
            <summary>
            Basic class for interfacing with TWAIN. You should only have one of this per application process.
            </summary>
        </member>
        <member name="P:NTwain.TwainSession.NTwain#Internals#ITwainSessionInternal#AppId">
            <summary>
            Gets the app id used for the session.
            </summary>
            <value>The app id.</value>
        </member>
        <member name="M:NTwain.TwainSession.NTwain#Internals#ITwainSessionInternal#EnableSource(NTwain.SourceEnableMode,System.Boolean,System.IntPtr)">
            <summary>
            Enables the source to start transferring.
            </summary>
            <param name="mode">The mode.</param>
            <param name="modal">if set to <c>true</c> any driver UI will display as modal.</param>
            <param name="windowHandle">The window handle if modal.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.IsTwainMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Checks and handles the message if it's a TWAIN message.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="msg">The message.</param>
            <param name="wParam">The w parameter.</param>
            <param name="lParam">The l parameter.</param>
            <returns>
            true if handled internally.
            </returns>
        </member>
        <member name="M:NTwain.TwainSession.#ctor(NTwain.Data.DataGroups)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainSession"/> class.
            </summary>
            <param name="supportedGroups">The supported groups.</param>
        </member>
        <member name="M:NTwain.TwainSession.#ctor(NTwain.Data.TWIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainSession" /> class.
            </summary>
            <param name="appId">The app id that represents calling application.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:NTwain.TwainSession.EnforceState">
            <summary>
            Gets or sets a value indicating whether calls to triplets will verify the current twain session state.
            </summary>
            <value>
              <c>true</c> if state value is enforced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.SynchronizationContext">
            <summary>
            [Experimental] Gets or sets the optional synchronization context when not specifying a <see cref="T:NTwain.MessageLoopHook"/> on <see cref="M:NTwain.TwainSession.Open"/>.
            This allows events to be raised on the thread associated with the context. This is experimental is not recommended for use.
            </summary>
            <value>
            The synchronization context.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.CurrentSource">
            <summary>
            Gets the currently open source.
            </summary>
            <value>
            The current source.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.DefaultSource">
            <summary>
            Gets or sets the default source for this application.
            While this can be get as long as the session is open,
            it can only be set at State 3.
            </summary>
            <value>
            The default source.
            </value>
        </member>
        <member name="M:NTwain.TwainSession.ShowSourceSelector">
            <summary>
            Try to show the built-in source selector dialog and return the selected source.
            This is not recommended and is only included for completeness.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NTwain.TwainSession.State">
            <summary>
            Gets the current state number as defined by the TWAIN spec.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.StateEx">
            <summary>
            Gets the named state value as defined by the TWAIN spec.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.IsDsmOpen">
            <summary>
            Quick flag to check if the DSM has been opened.
            </summary>
        </member>
        <member name="P:NTwain.TwainSession.IsSourceOpen">
            <summary>
            Quick flag to check if a source has been opened.
            </summary>
        </member>
        <member name="P:NTwain.TwainSession.IsSourceEnabled">
            <summary>
            Quick flag to check if a source has been enabled.
            </summary>
        </member>
        <member name="P:NTwain.TwainSession.IsTransferring">
            <summary>
            Quick flag to check if a source is in the transferring state.
            </summary>
        </member>
        <member name="P:NTwain.TwainSession.StopOnTransferError">
            <summary>
            Whether to stop the transfer process when transfer error is encountered.
            May be required on some sources.
            </summary>
            <value>
            <c>true</c> to stop on transfer error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.TwainSession.DisableReason">
            <summary>
            Gets the reason a source was disabled (dropped from state 5) if it's due to user action.
            Mostly only <see cref="F:NTwain.Data.Message.CloseDSOK" /> or <see cref="F:NTwain.Data.Message.CloseDSReq" />.
            </summary>
            <value>
            The dialog result.
            </value>
        </member>
        <member name="M:NTwain.TwainSession.Open">
            <summary>
            Opens the data source manager. This must be the first method used
            before using other TWAIN functions. Calls to this must be followed by
            <see cref="M:NTwain.TwainSession.Close" /> when done with a TWAIN session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.Open(NTwain.MessageLoopHook)">
            <summary>
            Opens the data source manager. This must be the first method used
            before using other TWAIN functions. Calls to this must be followed by
            <see cref="M:NTwain.TwainSession.Close" /> when done with a TWAIN session.
            </summary>
            <param name="messageLoopHook">The message loop hook.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">messageLoopHook</exception>
        </member>
        <member name="M:NTwain.TwainSession.Close">
            <summary>
            Closes the data source manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.GetSources">
            <summary>
            Gets list of sources available in the system.
            Only call this at state 2 or higher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.OpenSource(System.String)">
            <summary>
            Quick shortcut to open a source.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.OpenSource(System.Int32)">
            <summary>
            Quick shortcut to open a source.
            </summary>
            <param name="sourceId">Id of the source.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.GetStatus">
            <summary>
            Gets the manager status. Only call this at state 2 or higher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.GetStatusUtf8(NTwain.Data.TWStatus)">
            <summary>
            Gets the manager status string. Only call this at state 3 or higher.
            </summary>
            <param name="status">Status from previous calls.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.ForceStepDown(System.Int32)">
            <summary>
            Forces the stepping down of an opened source when things gets out of control.
            Used when session state and source state become out of sync.
            </summary>
            <param name="targetState">State of the target.</param>
        </member>
        <member name="E:NTwain.TwainSession.StateChanged">
            <summary>
            Occurs when <see cref="P:NTwain.TwainSession.State"/> has changed.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.SourceChanged">
            <summary>
            Occurs when <see cref="P:NTwain.TwainSession.CurrentSource"/> has changed.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.SourceDisabled">
            <summary>
            Occurs when source has been disabled (back to state 4).
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.DeviceEvent">
            <summary>
            Occurs when the source has generated an event.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.TransferReady">
            <summary>
            Occurs when a data transfer is ready.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.DataTransferred">
            <summary>
            Occurs when data has been transferred.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.TransferError">
            <summary>
            Occurs when an error has been encountered during transfer.
            </summary>
        </member>
        <member name="E:NTwain.TwainSession.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:NTwain.TwainSession.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:NTwain.TwainSession.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NTwain.TwainSession.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.TwainSession.SafeAsyncSyncableRaiseOnEvent(System.Action,System.EventHandler)">
            <summary>
            Raises event and if applicable marshal it asynchronously to the <see cref="P:NTwain.TwainSession.SynchronizationContext"/> thread
            without exceptions.
            </summary>
            <param name="onEventFunc">The on event function.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:NTwain.TwainSession.SafeSyncableRaiseOnEvent``1(System.Action{``0},System.EventHandler{``0},``0)">
            <summary>
            Raises event and if applicable marshal it synchronously to the <see cref="P:NTwain.TwainSession.SynchronizationContext" /> thread
            without exceptions.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="onEventFunc">The on event function.</param>
            <param name="handler">The handler.</param>
            <param name="e">The TEventArgs instance containing the event data.</param>
        </member>
        <member name="M:NTwain.TwainSession.OnStateChanged">
            <summary>
            Called when <see cref="P:NTwain.TwainSession.State"/> changed.
            </summary>
        </member>
        <member name="M:NTwain.TwainSession.OnSourceChanged">
            <summary>
            Called when <see cref="P:NTwain.TwainSession.CurrentSource"/> changed.
            </summary>
        </member>
        <member name="M:NTwain.TwainSession.OnSourceDisabled">
            <summary>
            Called when source has been disabled (back to state 4).
            </summary>
        </member>
        <member name="M:NTwain.TwainSession.OnDeviceEvent(NTwain.DeviceEventArgs)">
            <summary>
            Called when the source has generated an event.
            </summary>
            <param name="e">The <see cref="T:NTwain.DeviceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NTwain.TwainSession.OnTransferReady(NTwain.TransferReadyEventArgs)">
            <summary>
            Called when a data transfer is ready.
            </summary>
            <param name="e">The <see cref="T:NTwain.TransferReadyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NTwain.TwainSession.OnDataTransferred(NTwain.DataTransferredEventArgs)">
            <summary>
            Called when data has been transferred.
            </summary>
            <param name="e">The <see cref="T:NTwain.DataTransferredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NTwain.TwainSession.OnTransferError(NTwain.TransferErrorEventArgs)">
            <summary>
            Called when an error has been encountered during transfer.
            </summary>
            <param name="e">The <see cref="T:NTwain.TransferErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:NTwain.Capabilities">
            <summary>
            Exposes capabilities of a data source as properties.
            </summary>
        </member>
        <member name="M:NTwain.Capabilities.#ctor(NTwain.IDataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.Capabilities"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:NTwain.Capabilities.QuerySupport(NTwain.Data.CapabilityId)">
            <summary>
            Gets the actual supported operations for a capability. This is not supported by all sources.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.GetCurrent(NTwain.Data.CapabilityId)">
            <summary>
            Gets the current value for a capability.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.GetDefault(NTwain.Data.CapabilityId)">
            <summary>
            Gets the default value for a capability.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.GetValues(NTwain.Data.CapabilityId)">
            <summary>
            A general method that tries to get capability values from current <see cref="T:NTwain.DataSource" />.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.GetValuesRaw(NTwain.Data.CapabilityId)">
            <summary>
            Gets all the possible values of this capability without expanding.
            This may be required to work with large range values that cannot be safely enumerated
            with <see cref="M:NTwain.Capabilities.GetValues(NTwain.Data.CapabilityId)"/>.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.ResetAll">
            <summary>
            Resets all values and constraint to power-on defaults.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.Capabilities.Reset(NTwain.Data.CapabilityId)">
            <summary>
            Resets the current value to power-on default.
            </summary>
            <param name="capabilityId">The capability id.</param>
            <returns></returns>
        </member>
        <member name="P:NTwain.Capabilities.ACapXferMech">
            <summary>
            Gets the property to work with audio <see cref="T:NTwain.Data.XferMech"/> for the current source.
            </summary>
            <value>
            The audio xfer mech.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapCompression">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.CompressionType"/> for the current source.
            </summary>
            <value>
            The image compression.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPixelType">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.PixelType"/> for the current source.
            </summary>
            <value>
            The image pixel type.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapUnits">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.Unit"/> for the current source.
            </summary>
            <value>
            The image unit of measure.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapXferMech">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.XferMech"/> for the current source.
            </summary>
            <value>
            The image xfer mech.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutoBright">
            <summary>
            Gets the property to work with image auto brightness flag for the current source.
            </summary>
            <value>
            The image auto brightness flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBrightness">
            <summary>
            Gets the property to work with image brightness for the current source.
            </summary>
            <value>
            The image brightness.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapContrast">
            <summary>
            Gets the property to work with image contrast for the current source.
            </summary>
            <value>
            The image contrast.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapCustHalftone">
            <summary>
            Gets the property to work with image square-cell halftone for the current source.
            </summary>
            <value>
            The image square-cell halftone.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapExposureTime">
            <summary>
            Gets the property to work with image exposure time (in seconds) for the current source.
            </summary>
            <value>
            The image exposure time.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFilter">
            <summary>
            Gets the property to work with image color filter for the current source.
            </summary>
            <value>
            The image color filter type.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapGamma">
            <summary>
            Gets the property to work with image gamma value for the current source.
            </summary>
            <value>
            The image gamma.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapHalftones">
            <summary>
            Gets the property to work with image halftone patterns for the current source.
            </summary>
            <value>
            The image halftone patterns.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapHighlight">
            <summary>
            Gets the property to work with image highlight value for the current source.
            </summary>
            <value>
            The image highlight.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapImageFileFormat">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.FileFormat"/> for the current source.
            </summary>
            <value>
            The image file format.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapLampState">
            <summary>
            Gets the property to work with image lamp state flag for the current source.
            </summary>
            <value>
            The image lamp state flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapLightSource">
            <summary>
            Gets the property to work with image light source for the current source.
            </summary>
            <value>
            The image light source.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapOrientation">
            <summary>
            Gets the property to work with image orientation for the current source.
            </summary>
            <value>
            The image orientation.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPhysicalWidth">
            <summary>
            Gets the property to work with image physical width for the current source.
            </summary>
            <value>
            The image physical width.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPhysicalHeight">
            <summary>
            Gets the property to work with image physical height for the current source.
            </summary>
            <value>
            The image physical height.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapShadow">
            <summary>
            Gets the property to work with image shadow value for the current source.
            </summary>
            <value>
            The image shadow.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFrames">
            <summary>
            Gets the property to work with the list of frames the source will acquire on each page.
            </summary>
            <value>
            The capture frames.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapXNativeResolution">
            <summary>
            Gets the property to work with image's native x-axis resolution for the current source.
            </summary>
            <value>
            The image's native x-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapYNativeResolution">
            <summary>
            Gets the property to work with image's native y-axis resolution for the current source.
            </summary>
            <value>
            The image's native y-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapXResolution">
            <summary>
            Gets the property to work with image x-axis resolution for the current source.
            </summary>
            <value>
            The image x-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapYResolution">
            <summary>
            Gets the property to work with image y-axis resolution for the current source.
            </summary>
            <value>
            The image y-axis resolution.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapMaxFrames">
            <summary>
            Gets the property to work with image max frames for the current source.
            </summary>
            <value>
            The image max frames.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapTiles">
            <summary>
            Gets the property to work with image tiles flag for the current source.
            </summary>
            <value>
            The image tiles flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBitOrder">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.BitOrder"/> for the current source.
            </summary>
            <value>
            The image bit order.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapCCITTKFactor">
            <summary>
            Gets the property to work with image CCITT K factor for the current source.
            </summary>
            <value>
            The image CCITT K factor.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapLightPath">
            <summary>
            Gets the property to work with image light path for the current source.
            </summary>
            <value>
            The image light path.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPixelFlavor">
            <summary>
            Gets the property to work with image pixel flavor for the current source.
            </summary>
            <value>
            The image pixel flavor.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPlanarChunky">
            <summary>
            Gets the property to work with image color format for the current source.
            </summary>
            <value>
            The image color format.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapRotation">
            <summary>
            Gets the property to work with image rotation for the current source.
            </summary>
            <value>
            The image rotation.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapSupportedSizes">
            <summary>
            Gets the property to work with image <see cref="T:NTwain.Data.SupportedSize"/> for the current source.
            </summary>
            <value>
            The image supported size.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapThreshold">
            <summary>
            Gets the property to work with image threshold for the current source.
            </summary>
            <value>
            The image threshold.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapXScaling">
            <summary>
            Gets the property to work with image x-axis scaling for the current source.
            </summary>
            <value>
            The image x-axis scaling.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapYScaling">
            <summary>
            Gets the property to work with image y-axis scaling for the current source.
            </summary>
            <value>
            The image y-axis scaling.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBitOrderCodes">
            <summary>
            Gets the property to work with image CCITT compression <see cref="T:NTwain.Data.BitOrder"/> for the current source.
            </summary>
            <value>
            The image bit order for CCITT compression.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPixelFlavorCodes">
            <summary>
            Gets the property to work with image CCITT compression <see cref="T:NTwain.Data.PixelFlavor"/> for the current source.
            </summary>
            <value>
            The image pixel flavor for CCITT compression.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapJpegPixelType">
            <summary>
            Gets the property to work with image jpeg compression <see cref="T:NTwain.Data.PixelType"/> for the current source.
            </summary>
            <value>
            The image pixel type for jpeg compression.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapTimeFill">
            <summary>
            Gets the property to work with image CCITT time fill for the current source.
            </summary>
            <value>
            The image CCITT time fill.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBitDepth">
            <summary>
            Gets the property to work with image bit depth for the current source.
            </summary>
            <value>
            The image bit depth.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBitDepthReduction">
            <summary>
            Gets the property to work with image bit depth reduction method for the current source.
            </summary>
            <value>
            The image bit depth reduction method.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapUndefinedImageSize">
            <summary>
            Gets the property to work with image undefined size flag for the current source.
            </summary>
            <value>
            The image undefined size flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapImageDataSet">
            <summary>
            Gets or sets the image indices that will be delivered during the standard image transfer done in
            States 6 and 7.
            </summary>
            <value>
            The image indicies.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapExtImageInfo">
            <summary>
            Gets the property to work with ext image info flag for the current source.
            </summary>
            <value>
            The ext image info flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapMinimumHeight">
            <summary>
            Gets the property to work with image minimum height for the current source.
            </summary>
            <value>
            The image minimumm height.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapMinimumWidth">
            <summary>
            Gets the property to work with image minimum width for the current source.
            </summary>
            <value>
            The image minimumm width.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutoDiscardBlankPages">
            <summary>
            Gets the property to work with image blank page behavior for the current source.
            </summary>
            <value>
            The image blank page behavior.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFlipRotation">
            <summary>
            Gets the property to work with image flip-rotation behavior for the current source.
            </summary>
            <value>
            The image flip-rotation behavior.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeDetectionEnabled">
            <summary>
            Gets the property to work with image barcode detection flag for the current source.
            </summary>
            <value>
            The image barcode detection flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapSupportedBarcodeTypes">
            <summary>
            Gets the property to work with image barcode types for the current source.
            </summary>
            <value>
            The image barcode types.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeMaxSearchPriorities">
            <summary>
            Gets the property to work with image barcode max search priorities for the current source.
            </summary>
            <value>
            The image barcode max search priorities.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeSearchPriorities">
            <summary>
            Gets the property to work with image barcode search priority for the current source.
            </summary>
            <value>
            The image barcode search priority.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeSearchMode">
            <summary>
            Gets the property to work with image barcode search direction for the current source.
            </summary>
            <value>
            The image barcode search direction.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeMaxRetries">
            <summary>
            Gets the property to work with image barcode max search retries for the current source.
            </summary>
            <value>
            The image barcode max search retries.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapBarcodeTimeout">
            <summary>
            Gets the property to work with image barcode max search timeout for the current source.
            </summary>
            <value>
            The image barcode max search timeout.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapZoomFactor">
            <summary>
            Gets the property to work with image zoom factor for the current source.
            </summary>
            <value>
            The image zoom factor.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeDetectionEnabled">
            <summary>
            Gets the property to work with image patch code detection flag for the current source.
            </summary>
            <value>
            The image patch code detection flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapSupportedPatchCodeTypes">
            <summary>
            Gets the property to work with image patch code types for the current source.
            </summary>
            <value>
            The image patch code types.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeMaxSearchPriorities">
            <summary>
            Gets the property to work with image patch code max search priorities for the current source.
            </summary>
            <value>
            The image patch code max search priorities.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeSearchPriorities">
            <summary>
            Gets the property to work with image patch code search priority for the current source.
            </summary>
            <value>
            The image patch code search priority.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeSearchMode">
            <summary>
            Gets the property to work with image patch code search direction for the current source.
            </summary>
            <value>
            The image patch code search direction.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeMaxRetries">
            <summary>
            Gets the property to work with image patch code max search retries for the current source.
            </summary>
            <value>
            The image patch code max search retries.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapPatchCodeTimeout">
            <summary>
            Gets the property to work with image patch code max search timeout for the current source.
            </summary>
            <value>
            The image patch code max search timeout.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFlashUsed2">
            <summary>
            Gets the property to work with flash option for the current source.
            </summary>
            <value>
            The flash option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapImageFilter">
            <summary>
            Gets the property to work with image enhancement filter for the current source.
            </summary>
            <value>
            The image enhancement filter.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapNoiseFilter">
            <summary>
            Gets the property to work with image noise filter for the current source.
            </summary>
            <value>
            The image noise filter.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapOverScan">
            <summary>
            Gets the property to work with image overscan option for the current source.
            </summary>
            <value>
            The image overscan option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticBorderDetection">
            <summary>
            Gets the property to work with auto border detection flag for the current source.
            </summary>
            <value>
            The auto border detection flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticDeskew">
            <summary>
            Gets the property to work with image auto deskew flag for the current source.
            </summary>
            <value>
            The image auto deskew flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticRotate">
            <summary>
            Gets the property to work with image auto rotate flag for the current source.
            </summary>
            <value>
            The image auto rotate flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapJpegQuality">
            <summary>
            Gets the property to work with image jpeg quality for the current source.
            </summary>
            <value>
            The image jpeg quality.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFeederType">
            <summary>
            Gets the property to work with feeder type for the current source.
            </summary>
            <value>
            The feeder type.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapICCProfile">
            <summary>
            Gets the property to work with image icc profile for the current source.
            </summary>
            <value>
            The image icc profile.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutoSize">
            <summary>
            Gets the property to work with image auto size option for the current source.
            </summary>
            <value>
            The image auto size option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticCropUsesFrame">
            <summary>
            Gets the property to work with image auto crop flag for the current source.
            </summary>
            <value>
            The image auto crop flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticLengthDetection">
            <summary>
            Gets the property to work with image auto length detection flag for the current source.
            </summary>
            <value>
            The image auto length detection flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticColorEnabled">
            <summary>
            Gets the property to work with image auto color detection flag for the current source.
            </summary>
            <value>
            The image auto color detection flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapAutomaticColorNonColorPixelType">
            <summary>
            Gets the property to work with image auto non-color pixel type for the current source.
            </summary>
            <value>
            The image auto non-color pixel type.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapColorManagementEnabled">
            <summary>
            Gets the property to work with image color management flag for the current source.
            </summary>
            <value>
            The image color management flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapImageMerge">
            <summary>
            Gets the property to work with image merge option for the current source.
            </summary>
            <value>
            The image merge option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapImageMergeHeightThreshold">
            <summary>
            Gets the property to work with image merge height threshold for the current source.
            </summary>
            <value>
            The image merge height threshold.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapSupportedExtImageInfo">
            <summary>
            Gets the property to get supported ext image info for the current source.
            </summary>
            <value>
            The supported ext image info.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapFilmType">
            <summary>
            Gets the property to work with image film type for the current source.
            </summary>
            <value>
            The image film type.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapMirror">
            <summary>
            Gets the property to work with image mirror option for the current source.
            </summary>
            <value>
            The image mirror option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.ICapJpegSubsampling">
            <summary>
            Gets the property to work with image jpeg sub sampling for the current source.
            </summary>
            <value>
            The image jpeg sub sampling.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapXferCount">
            <summary>
            Gets the property to work with xfer count for the current source.
            </summary>
            <value>
            The xfer count.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAuthor">
            <summary>
            Gets the property to work with the name or other identifying information about the 
            Author of the image. It may include a copyright string.
            </summary>
            <value>
            The author string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCaption">
            <summary>
            Gets the property to work with the general note about the acquired image.
            </summary>
            <value>
            The general note string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederEnabled">
            <summary>
            Gets the property to work with feeder enabled flag for the current source.
            </summary>
            <value>
            The feeder enabled flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederLoaded">
            <summary>
            Gets the property to work with feeder loaded flag for the current source.
            </summary>
            <value>
            The feeder loaded flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapTimeDate">
            <summary>
            Gets the property to get the image acquired time and date.
            </summary>
            <value>
            The time and date string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapSupportedCaps">
            <summary>
            Gets the supported caps for the current source. This is not supported by all sources.
            </summary>
            <value>
            The supported caps.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapExtendedCaps">
            <summary>
            Gets the extended caps for the current source.
            </summary>
            <value>
            The extended caps.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAutoFeed">
            <summary>
            Gets the property to work with auto feed page flag for the current source.
            </summary>
            <value>
            The auto feed flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapClearPage">
            <summary>
            Gets the property to work with clear page flag for the current source.
            </summary>
            <value>
            The clear page flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeedPage">
            <summary>
            Gets the property to work with feed page flag for the current source.
            </summary>
            <value>
            The feed page flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapRewindPage">
            <summary>
            Gets the property to work with rewind page flag for the current source.
            </summary>
            <value>
            The rewind page flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapIndicators">
            <summary>
            Gets the property to work with indicators flag for the current source.
            </summary>
            <value>
            The indicators flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPaperDetectable">
            <summary>
            Gets the property to work with paper sensor flag for the current source.
            </summary>
            <value>
            The paper sensor flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapUIControllable">
            <summary>
            Gets the property to work with UI controllable flag for the current source.
            </summary>
            <value>
            The UI controllable flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDeviceOnline">
            <summary>
            Gets the property to work with devince online flag for the current source.
            </summary>
            <value>
            The devince online flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAutoScan">
            <summary>
            Gets the property to work with auto scan page flag for the current source.
            </summary>
            <value>
            The auto scan flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapThumbnailsEnabled">
            <summary>
            Gets the property to work with thumbnails enabled flag for the current source.
            </summary>
            <value>
            The thumbnails enabled flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDuplex">
            <summary>
            Gets the property to see what's the duplex mode for the current source.
            </summary>
            <value>
            The duplex mode.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDuplexEnabled">
            <summary>
            Gets the property to work with duplex enabled flag for the current source.
            </summary>
            <value>
            The duplex enabled flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapEnableDSUIOnly">
            <summary>
            Gets the property to see whether device supports UI only flag (no transfer).
            </summary>
            <value>
            The UI only flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCustomDSData">
            <summary>
            Gets the property to see whether device supports custom data triplets.
            </summary>
            <value>
            The custom data flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapEndorser">
            <summary>
            Gets the property to work with endorser for the current source.
            </summary>
            <value>
            The endorser option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapJobControl">
            <summary>
            Gets the property to work with job control option for the current source.
            </summary>
            <value>
            The job control option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAlarms">
            <summary>
            Gets the property to work with alarms for the current source.
            </summary>
            <value>
            The alarms.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAlarmVolume">
            <summary>
            Gets the property to work with alarm volume for the current source.
            </summary>
            <value>
            The alarm volume.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAutomaticCapture">
            <summary>
            Gets the property to work with auto capture count for the current source.
            </summary>
            <value>
            The auto capture count.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapTimeBeforeFirstCapture">
            <summary>
            Gets the property to work with the time before first capture (milliseconds) for the current source.
            </summary>
            <value>
            The time before first capture.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapTimeBetweenCaptures">
            <summary>
            Gets the property to work with the time between captures (milliseconds) for the current source.
            </summary>
            <value>
            The time between captures.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapClearBuffers">
            <summary>
            Gets the property to work with the clear buffers option for the current source.
            </summary>
            <value>
            The clear buffers option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapMaxBatchBuffers">
            <summary>
            Gets the property to work with the max buffered pages for the current source.
            </summary>
            <value>
            The max batch buffered pages.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDeviceTimeDate">
            <summary>
            Gets the property to work with the device's time and date.
            </summary>
            <value>
            The device time and date.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPowerSupply">
            <summary>
            Gets the property to see current device's power supply.
            </summary>
            <value>
            The power supply indicator.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCameraPreviewUI">
            <summary>
            Gets the property to see whether device supports camera preview UI flag.
            </summary>
            <value>
            The camera preview UI flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDeviceEvent">
            <summary>
            Gets the property to work with the reported device events for the current source.
            </summary>
            <value>
            The reported device events.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapSerialNumber">
            <summary>
            Gets the property for device serial number.
            </summary>
            <value>
            The device serial number.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinter">
            <summary>
            Gets the property to work with printer list for the current source.
            </summary>
            <value>
            The printer list.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterEnabled">
            <summary>
            Gets the property to work with printer enabled flag.
            </summary>
            <value>
            The printer enabled flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndex">
            <summary>
            Gets the property to work with the starting printer index for the current source.
            </summary>
            <value>
            The printer index.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterMode">
            <summary>
            Gets the property to work with printer mode for the current source.
            </summary>
            <value>
            The printer mode.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterString">
            <summary>
            Specifies the string(s) that are to be used in the string component when the current <see cref="P:NTwain.Capabilities.CapPrinter"/>
            device is enabled.
            </summary>
            <value>
            The printer string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterSuffix">
            <summary>
            Specifies the string that shall be used as the current <see cref="P:NTwain.Capabilities.CapPrinter"/> device’s suffix.
            </summary>
            <value>
            The printer suffix string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapLanguage">
            <summary>
            Gets the property to work with string data language for the current source.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederAlignment">
            <summary>
            Gets the property to work with feeder alignment for the current source.
            </summary>
            <value>
            The feeder alignment.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederOrder">
            <summary>
            Gets the property to work with feeder order for the current source.
            </summary>
            <value>
            The feeder order.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapReacquireAllowed">
            <summary>
            Gets the property to see whether device supports reacquire flag.
            </summary>
            <value>
            The reacquire flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapBatteryMinutes">
            <summary>
            Gets the property to see the remaining battery power for the device.
            </summary>
            <value>
            The battery minutes.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapBatteryPercentage">
            <summary>
            Gets the property to see the remaining battery percentage for the device.
            </summary>
            <value>
            The battery percentage.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCameraSide">
            <summary>
            Gets the property to work with camera side for the current source.
            </summary>
            <value>
            The camera side.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapSegmented">
            <summary>
            Gets the property to work with segmentation setting for the current source.
            </summary>
            <value>
            The segmentation setting.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCameraEnabled">
            <summary>
            Gets the property to work with camera enabled flag.
            </summary>
            <value>
            The camera enabled flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCameraOrder">
            <summary>
            Gets the property to work with camera order for the current source.
            </summary>
            <value>
            The camera order setting.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapMicrEnabled">
            <summary>
            Gets the property to work with check scanning support flag.
            </summary>
            <value>
            The check scanning support flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederPrep">
            <summary>
            Gets the property to work with feeder prep flag.
            </summary>
            <value>
            The feeder prep flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapFeederPocket">
            <summary>
            Gets the property to work with feeder pocket for the current source.
            </summary>
            <value>
            The feeder pocket setting.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapAutomaticSenseMedium">
            <summary>
            Gets the property to work with auto-sense medium (paper source) flag.
            </summary>
            <value>
            The auto-sense medium flag.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapCustomInterfaceGuid">
            <summary>
            Gets the property for device interface guid.
            </summary>
            <value>
            The device interface guid.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapSupportedCapsSegmentUnique">
            <summary>
            Gets the supported caps for unique segments for the current source.
            </summary>
            <value>
            The supported caps for unique segments.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapSupportedDATs">
            <summary>
            Gets the supported caps for supported DATs.
            </summary>
            <value>
            The supported DATs.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDoubleFeedDetection">
            <summary>
            Gets the property to work with double feed detection option for the current source.
            </summary>
            <value>
            The double feed detection option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDoubleFeedDetectionLength">
            <summary>
            Gets the property to work with double feed detection length for the current source.
            </summary>
            <value>
            The double feed detection length.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDoubleFeedDetectionSensitivity">
            <summary>
            Gets the property to work with double feed detection sensitivity for the current source.
            </summary>
            <value>
            The double feed detection sensitivity.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapDoubleFeedDetectionResponse">
            <summary>
            Gets the property to work with double feed detection response for the current source.
            </summary>
            <value>
            The double feed detection response.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPaperHandling">
            <summary>
            Gets the property to work with paper handling option for the current source.
            </summary>
            <value>
            The paper handling option.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapIndicatorsMode">
            <summary>
            Gets the property to work with diplayed indicators for the current source.
            </summary>
            <value>
            The diplayed indicators.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterVerticalOffset">
            <summary>
            Gets the property to work with printer y-offset for the current source.
            </summary>
            <value>
            The printer y-offset.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPowerSaveTime">
            <summary>
            Gets the property to work with camera power down time (seconds) for the current source.
            </summary>
            <value>
            The camera power down time.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterCharRotation">
            <summary>
            Gets the property to work with printer character rotation for the current source.
            </summary>
            <value>
            The printer character rotation.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterFontStyle">
            <summary>
            Gets the property to work with printer font style for the current source.
            </summary>
            <value>
            The printer font style.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndexLeadChar">
            <summary>
            Set the character to be used for filling the leading digits before the counter value if the
            counter digits are fewer than <see cref="P:NTwain.Capabilities.CapPrinterIndexNumDigits"/>.
            </summary>
            <value>
            The printer leading string.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndexMaxValue">
            <summary>
            Gets the property to work with printer index max value for the current source.
            </summary>
            <value>
            The printer index max value.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndexNumDigits">
            <summary>
            Gets the property to work with printer number digits value for the current source.
            </summary>
            <value>
            The printer number digits value.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndexStep">
            <summary>
            Gets the property to work with printer index step value for the current source.
            </summary>
            <value>
            The printer index step value.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterIndexTrigger">
            <summary>
            Gets the property to work with printer index trigger for the current source.
            </summary>
            <value>
            The printer index trigger.
            </value>
        </member>
        <member name="P:NTwain.Capabilities.CapPrinterStringPreview">
            <summary>
            Gets the next print values.
            </summary>
            <value>
            The next print values.
            </value>
        </member>
        <member name="T:NTwain.DataSource">
            <summary>
            Represents a TWAIN data source.
            </summary>
        </member>
        <member name="M:NTwain.DataSource.Open">
            <summary>
            Opens the source for capability negotiation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.DataSource.Close">
            <summary>
            Closes the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.DataSource.Enable(NTwain.SourceEnableMode,System.Boolean,System.IntPtr)">
            <summary>
            Enables the source to start transferring.
            </summary>
            <param name="mode">The mode.</param>
            <param name="modal">if set to <c>true</c> any driver UI will display as modal.</param>
            <param name="windowHandle">The window handle if modal.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.DataSource.GetStatus">
            <summary>
            Gets the source status. Only call this at state 4 or higher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.DataSource.GetStatusUtf8(NTwain.Data.TWStatus)">
            <summary>
            Gets the source status string. Only call this at state 4 or higher.
            </summary>
            <param name="status">Status from previous calls.</param>
            <returns></returns>
        </member>
        <member name="P:NTwain.DataSource.Id">
            <summary>
            Gets the id of the source.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:NTwain.DataSource.Name">
            <summary>
            Gets the source's product name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NTwain.DataSource.Manufacturer">
            <summary>
            Gets the source's manufacturer name.
            </summary>
            <value>
            The manufacturer.
            </value>
        </member>
        <member name="P:NTwain.DataSource.ProductFamily">
            <summary>
            Gets the source's product family.
            </summary>
            <value>
            The product family.
            </value>
        </member>
        <member name="P:NTwain.DataSource.Version">
            <summary>
            Gets the source's version information.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:NTwain.DataSource.DataGroup">
            <summary>
            Gets the supported data group.
            </summary>
            <value>
            The data group.
            </value>
        </member>
        <member name="P:NTwain.DataSource.ProtocolVersion">
            <summary>
            Gets the supported TWAIN protocol version.
            </summary>
            <value>
            The protocol version.
            </value>
        </member>
        <member name="P:NTwain.DataSource.IsOpen">
            <summary>
            Gets a value indicating whether this data source has been opened.
            </summary>
            <value>
              <c>true</c> if this data source is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NTwain.DataSource.Settings">
            <summary>
            Gets or sets the current settings (CustomDSData) of this source if supported.
            </summary>
            <value>
            The source settings.
            </value>
        </member>
        <member name="P:NTwain.DataSource.Capabilities">
            <summary>
            Gets the capabilities for this data source.
            </summary>
            <value>
            The capabilities.
            </value>
        </member>
        <member name="P:NTwain.DataSource.DGControl">
            <summary>
            Gets the triplet operations defined for control data group.
            </summary>
        </member>
        <member name="P:NTwain.DataSource.DGImage">
            <summary>
            Gets the triplet operations defined for image data group.
            </summary>
        </member>
        <member name="P:NTwain.DataSource.DGCustom">
            <summary>
            Gets the direct triplet operation entry for custom values.
            </summary>
        </member>
        <member name="M:NTwain.DataSource.GetCameras">
            <summary>
            [Experimental] Gets the cameras supported by the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTwain.DataSource.SetCamera(System.String)">
            <summary>
            [Experimental] Sets the target camera for cap negotiation that can be set per camera.
            </summary>
            <param name="cameraName"></param>
            <returns></returns>
        </member>
        <member name="T:NTwain.TwainStateException">
            <summary>
            Represents an exception from calling a TWAIN triplet operation in the wrong state.
            </summary>
        </member>
        <member name="M:NTwain.TwainStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainStateException"/> class.
            </summary>
        </member>
        <member name="M:NTwain.TwainStateException.#ctor(System.Int32,System.Int32,System.Int32,NTwain.Data.DataGroups,NTwain.Data.DataArgumentType,NTwain.Data.Message,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainStateException"/> class.
            </summary>
            <param name="currentState">The actual state number.</param>
            <param name="minStateExpected">The minimum state allowed.</param>
            <param name="maxStateExpected">The maximum state allowed.</param>
            <param name="dataGroup">The data group used.</param>
            <param name="argumentType">The data argument type used.</param>
            <param name="twainMessage">The twain message used.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NTwain.TwainStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainStateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:NTwain.TwainStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:NTwain.TwainStateException.MinStateExpected">
            <summary>
            Gets the allowed minimum state.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:NTwain.TwainStateException.MaxStateExpected">
            <summary>
            Gets the allowed maximum state.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:NTwain.TwainStateException.ActualState">
            <summary>
            Gets the actual state number.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:NTwain.TwainStateException.DataGroup">
            <summary>
            Gets the triplet data group.
            </summary>
            <value>The data group.</value>
        </member>
        <member name="P:NTwain.TwainStateException.ArgumentType">
            <summary>
            Gets the triplet data argument type.
            </summary>
            <value>The type of the argument.</value>
        </member>
        <member name="P:NTwain.TwainStateException.TwainMessage">
            <summary>
            Gets the triplet message.
            </summary>
            <value>The twain message.</value>
        </member>
        <member name="T:NTwain.TwainException">
            <summary>
            Represents a general exception with TWAIN.
            </summary>
        </member>
        <member name="M:NTwain.TwainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException"/> class.
            </summary>
        </member>
        <member name="M:NTwain.TwainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NTwain.TwainException.#ctor(NTwain.Data.ReturnCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException" /> class.
            </summary>
            <param name="returnCode">The return code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NTwain.TwainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NTwain.TwainException.#ctor(NTwain.Data.ReturnCode,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException" /> class.
            </summary>
            <param name="returnCode">The return code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NTwain.TwainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NTwain.TwainException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:NTwain.TwainException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:NTwain.TwainException.ReturnCode">
            <summary>
            Gets the return code from the TWAIN operation if applicable.
            </summary>
            <value>
            The return code.
            </value>
        </member>
        <member name="T:NTwain.SourceEnableMode">
            <summary>
            Indicates how the source should be enabled in a TWAIN session.
            </summary>
        </member>
        <member name="F:NTwain.SourceEnableMode.NoUI">
            <summary>
            Start acquiring without driver UI.
            </summary>
        </member>
        <member name="F:NTwain.SourceEnableMode.ShowUI">
            <summary>
            Start acquiring with driver UI.
            </summary>
        </member>
        <member name="F:NTwain.SourceEnableMode.ShowUIOnly">
            <summary>
            Show driver UI for settings change but no acquisition.
            </summary>
        </member>
        <member name="T:NTwain.WpfImageTools">
            <summary>
            Contains extension methods for wpf images.
            </summary>
        </member>
        <member name="M:NTwain.WpfImageTools.ConvertToWpfBitmap(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:System.IO.Stream" /> into WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. The image created
            will be a copy so the stream can be disposed once this call returns.
            </summary>
            <param name="stream">The image stream.</param>
            <returns></returns>
        </member>
        <member name="M:NTwain.WpfImageTools.ConvertToWpfBitmap(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Loads a <see cref="T:System.IO.Stream" /> into WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. The image created
            will be a copy so the stream can be disposed once this call returns.
            </summary>
            <param name="stream">The image stream.</param>
            <param name="decodeWidth">Max width of the decoded image. Pass 0 to use default.</param>
            <param name="decodeHeight">Max height of the decoded image. Pass 0 to use default.</param>
            <returns></returns>
        </member>
    </members>
</doc>
